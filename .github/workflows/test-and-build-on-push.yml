---
name: Test and Build (on push to develop)

on:
  push:
    branches:
      - develop
    paths-ignore:
      - .cursor/**
      - .devcontainer/**
      - assets/**
      - README.md
      - .gitignore
      - .cz_config.js
      - .pre-commit-config.yaml
      - "**.code-workspace"

permissions:
  actions: read
  contents: read
  security-events: write

env:
  GLOBAL_ALLOWED_ENDPOINTS: |
    api.github.com:443
    github.com:443
  GLOBAL_PYTHON_VERSION: ${{ vars.GLOBAL_PYTHON_VERSION }}

jobs:
  test-and-build:
    uses: ./.github/workflows/reusable-test-and-build.yml
    with:
      concurrency_group: push-${{ github.workflow }}-${{ github.ref }}
      concurrency_cancel_in_progress: true
      workflow_summary_name: "Workflow summary [Test & Build (on Push)]"

  get-npm-versions:
    outputs:
      main_version: ${{ steps.set-versions.outputs.main_version }}
      develop_version: ${{ steps.set-versions.outputs.develop_version }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: true

      - name: Checkout main branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: main
          fetch-depth: 0

      - name: Get version from main
        id: get-main-ver
        uses: martinbeentjes/npm-get-version-action@3cf273023a0dda27efcd3164bdfb51908dd46a5b # v1.3.1

      - name: Checkout develop branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: develop
          fetch-depth: 0

      - name: Get version from develop
        id: get-dev-ver
        uses: martinbeentjes/npm-get-version-action@3cf273023a0dda27efcd3164bdfb51908dd46a5b # v1.3.1

      - name: Set versions output
        id: set-versions
        run: |
          echo "Main version: ${{ steps.get-main-ver.outputs.current-version }}"
          echo "Develop version: ${{ steps.get-dev-ver.outputs.current-version }}"
          echo "main_version=${{ steps.get-main-ver.outputs.current-version }}" >> "$GITHUB_OUTPUT"
          echo "develop_version=${{ steps.get-dev-ver.outputs.current-version }}" >> "$GITHUB_OUTPUT"

  create-pr-to-main:
    needs:
      - test-and-build
      - get-npm-versions
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Dump GitHub context # Keep for potential debugging/context needs within the action
        id: github_context_step
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT" | jq -r '. | {event_name, workflow_ref, repository, run_id, run_number}'

      - name: Compare versions (Semver)
        uses: madhead/semver-utils@36d1e0ed361bd7b4b77665de8093092eaeabe6ba # v4.3.0
        id: compare-versions
        with:
          version: ${{ needs.get-npm-versions.outputs.develop_version }}
          compare-to: ${{ needs.get-npm-versions.outputs.main_version }}

      - name: Display version comparison result # Optional: for debugging
        shell: bash
        run: |
          echo "Comparison Result: ${{ steps.compare-versions.outputs.comparison-result }}"

      - name: Check if PR already exists
        id: check-pr
        if: steps.compare-versions.outputs.comparison-result == '>'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const pulls = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:develop`, // Assuming develop is always the head
                base: 'main',                       // Assuming main is always the base
                state: 'open'
              });

              const prExists = pulls.data.length;
              console.log(`Existing open PRs from develop to main: ${prExists}`);
              core.setOutput('exists', prExists.toString());
              core.setOutput('success', 'true');
            } catch (error) {
              console.error(`Error checking for existing PRs: ${error.message}`);
              core.setOutput('exists', ''); // Indicate failure
              core.setOutput('success', 'false');
              core.setFailed(`Error checking for existing PRs: ${error.message}`);
            }

      - name: Ensure labels exist
        id: ensure-labels
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let allLabelsEnsured = true;
            const requiredLabels = [
              { name: "automated-pr", description: "Automatically generated PR", color: "0E8A16" },
              { name: "release", description: "PR for automated release", color: "1D76DB" }
            ];

            async function ensureLabel(labelInfo) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelInfo.name
                });
                console.log(`Label '${labelInfo.name}' already exists.`);
                return true;
              } catch (error) {
                if (error.status === 404) {
                  console.log(`Label '${labelInfo.name}' does not exist. Creating...`);
                  try {
                    await github.rest.issues.createLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: labelInfo.name,
                      description: labelInfo.description,
                      color: labelInfo.color
                    });
                    console.log(`Label '${labelInfo.name}' created successfully.`);
                    return true;
                  } catch (createError) {
                    console.error(`Failed to create label '${labelInfo.name}': ${createError.message}`);
                    allLabelsEnsured = false;
                    return false;
                  }
                } else {
                  console.error(`Error checking label '${labelInfo.name}': ${error.message}`);
                  allLabelsEnsured = false;
                  return false;
                }
              }
            }

            console.log("::notice::Ensuring required labels exist...");
            for (const label of requiredLabels) {
              await ensureLabel(label);
            }

            if (allLabelsEnsured) {
              console.log("All required labels exist or were created.");
              core.setOutput('success', 'true');
            } else {
              console.error("Failed to ensure one or more required labels.");
              core.setOutput('success', 'false');
              core.setFailed("Failed to ensure one or more required labels.");
            }

      # Setup Python required by the create_pr.py script
      - name: Set up Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Get commit log
        id: commit_log
        run: |
          echo "以下のコミットが含まれています:" > .commit-log.txt
          echo "" >> .commit-log.txt
          git log origin/main..HEAD --pretty=format:"- %s" --no-merges > .commit-log.txt

      - name: Create Pull Request using github-script
        id: create-pr-script
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: |
          steps.compare-versions.outputs.comparison-result == '>' &&
          steps.check-pr.outputs.success == 'true' &&
          steps.check-pr.outputs.exists == '0' &&
          steps.ensure-labels.outputs.success == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const developVersion = "${{ needs.get-npm-versions.outputs.develop_version }}";
            const commitLogPath = '.commit-log.txt';
            let commitLogContent = '';
            try {
              commitLogContent = fs.readFileSync(commitLogPath, 'utf8');
              console.log(`Successfully read commit log from ${commitLogPath}`);
            } catch (error) {
              console.error(`Error reading commit log file ${commitLogPath}: ${error.message}`);
              core.setFailed(`Failed to read commit log: ${error.message}`);
              return; // Stop execution if commit log cannot be read
            }

            const prOptions = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release: v${developVersion}`,
              head: 'develop', // Pointing to the develop branch
              base: 'main',
              body: commitLogContent,
              maintainer_can_modify: true,
              draft: false
            };

            try {
              console.log(`Attempting to create pull request: ${prOptions.title}`);
              const { data: pullRequest } = await github.rest.pulls.create(prOptions);
              console.log(`Successfully created pull request #${pullRequest.number}: ${pullRequest.html_url}`);
              core.setOutput('pr_url', pullRequest.html_url);
              core.setOutput('outcome', 'success');

              // Add labels to the created PR
              try {
                const labels = ['release', 'automated-pr'];
                console.log(`Adding labels (${labels.join(', ')}) to PR #${pullRequest.number}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pullRequest.number,
                  labels: labels
                });
                console.log('Labels added successfully.');
              } catch (labelError) {
                console.error(`Failed to add labels to PR #${pullRequest.number}: ${labelError.message}`);
                // Continue even if adding labels fails, but log the error
              }

            } catch (error) {
              console.error(`Failed to create pull request: ${error.message}`);
              core.setOutput('outcome', 'error');
              core.setOutput('pr_url', '');
              core.setFailed(`Failed to create pull request: ${error.message}`);
            }
        env:
          DEVELOP_VERSION: ${{ needs.get-npm-versions.outputs.develop_version }}

      - name: Set Final Status
        id: set-status
        # Always run this step to report the final status
        if: always()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const compareResult = "${{ steps.compare-versions.outputs.comparison-result }}";
            const checkPrSuccess = "${{ steps.check-pr.outputs.success }}";
            const checkPrExists = "${{ steps.check-pr.outputs.exists }}";
            const ensureLabelsSuccess = "${{ steps.ensure-labels.outputs.success }}";
            // Use the outcome and URL from the new script step
            const createPrOutcome = "${{ steps.create-pr-script.outputs.outcome }}";
            const createPrUrl = "${{ steps.create-pr-script.outputs.pr_url }}";
            const developVersion = "${{ needs.get-npm-versions.outputs.develop_version }}";
            const mainVersion = "${{ needs.get-npm-versions.outputs.main_version }}";

            let status = "unknown"; // Default status
            let prUrl = createPrUrl || "";

            core.info(`Initial evaluation: compareResult='${compareResult}', checkPrSuccess='${checkPrSuccess}', checkPrExists='${checkPrExists}', ensureLabelsSuccess='${ensureLabelsSuccess}', createPrOutcome='${createPrOutcome}'`);

            if (compareResult === '>') {
              if (checkPrSuccess === 'true') {
                if (checkPrExists !== '0') {
                  status = "exists";
                  core.info(`Status update: PR already exists (checkPrExists=${checkPrExists}). Setting status to '${status}'.`);
                } else { // No existing PR
                  if (ensureLabelsSuccess === 'true') {
                    // Check the outcome of the create-pr-script step
                    if (createPrOutcome === 'success') {
                      status = "created";
                      core.info(`Status update: PR creation successful. Setting status to '${status}' and pr_url.`);
                    } else if (createPrOutcome === 'error') {
                      status = "error_create_pr";
                      core.error(`Create PR script failed. Setting status to '${status}'.`);
                    } else {
                      // This case should ideally not happen if the script step ran
                      status = "skipped_create_pr_script"; // Indicates the script step itself was skipped or didn't output 'success'/'error'
                      core.warning(`Create PR script outcome was neither 'success' nor 'error' ('${createPrOutcome}'). Setting status to '${status}'.`);
                    }
                  } else { // ensure-labels failed
                    status = "skipped_label_fail";
                    core.error(`Ensure Labels step failed (success: ${ensureLabelsSuccess}). Setting status to '${status}'.`);
                  }
                }
              } else { // check-pr failed
                status = "error_check_pr";
                core.error(`Check PR step failed (success: ${checkPrSuccess}). Setting status to '${status}'.`);
              }
            } else { // Version comparison did not result in '>'
              core.info(`Skipping PR creation: develop version (${developVersion}) is not greater than main version (${mainVersion}). Comparison result: ${compareResult}`);
              status = "skipped_version_compare";
            }

            // Override status if the create-pr-script step was explicitly skipped by its 'if' condition
            if (compareResult !== '>' || checkPrSuccess !== 'true' || checkPrExists !== '0' || ensureLabelsSuccess !== 'true') {
                if (status === 'unknown') { // Only override if not already set by inner logic
                    status = 'skipped_precondition_fail';
                    core.info(`Create PR script step preconditions not met. Setting status to '${status}'.`);
                }
            }

            core.info(`Final Status determined: ${status}`);
            core.setOutput('status', status);
            core.setOutput('pr_url', prUrl);

            // Log errors based on status
            if (status.startsWith('error_') || status === 'skipped_label_fail') {
              core.error(`Workflow action encountered an issue: ${status}`);
            }

  pyre:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Test Pyre
        uses: ./.github/actions/test-pyre
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}
        timeout-minutes: 10
        continue-on-error: true
