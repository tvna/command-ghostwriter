---
name: Test & Build

on:
  push:
    branches:
      - develop
    paths-ignore:
      - .devcontainer/**
      - assets/**
      - README.md
      - .gitignore
      - .cz_config.js
      - .pre-commit-config.yaml
      - "**.code-workspace"
  pull_request:
    branches:
      - main
      - develop

defaults:
  run:
    shell: bash

env:
  python-version: 3.12.3
  node-version: 22

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  actionlint:
    name: Lint github actions workflows
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      - name: Check workflow files
        uses: docker://rhysd/actionlint:latest
        with:
          args: -color

  test:
    name: Test streamlit web-app
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest
          - ubuntu-22.04
          - ubuntu-20.04
        python-version:
          - 3.12.3
          - 3.11
    runs-on: ${{ matrix.os }}
    needs:
      - actionlint
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Bootstrap poetry (Windows)
        if: runner.os == 'Windows'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Bootstrap poetry (Non-Windows)
        if: runner.os != 'Windows'
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH (Non-Windows)
        if: runner.os != 'Windows'
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        shell: bash
      - name: Configure poetry (Non-Windows)
        if: runner.os != 'Windows'
        run: |
          poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          poetry install
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          source .venv/scripts/activate
          poetry install
      - name: Install Playwright Browsers
        run: |
          poetry run playwright install
      - name: Run ruff
        run: |
          poetry run ruff check .
      - name: Run mypy
        run: |
          poetry run mypy .
      - name: Run pytest
        run: |
          poetry run pytest --cov . -n auto

  analyze:
    # https://github.com/terryyin/lizard
    name: Analyze CCN number, AST
    runs-on: ubuntu-latest
    needs:
      - actionlint
    permissions:
      contents: read
    env:
      LIZARD_CCN_COUNT: 10
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python${{ env.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        shell: bash
      - name: Configure poetry
        run: poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install
      - name: Run lizard (analyze CCN for production codes)
        run: |
          poetry run lizard -x "./node_modules/*" -x "./.venv/*" -x "./build/*" -x "./dist/*" -x "./htmlcov/*" -x "./tests/*" --CCN "$LIZARD_CCN_COUNT"
      - name: Show AST (app.py)
        run: |
          python <<EOF
          import ast
          print(ast.dump(ast.parse(open("app.py").read()), indent=2))
          EOF
      - name: Show AST (features/*.py)
        run: |
          python <<EOF
          import ast
          import os
          import pprint

          target_dir = "./features"
          ast_trees = {}
          for file in os.listdir(target_dir):
              if file.endswith(".py"):
                  ast_trees[file] = ast.dump(ast.parse(open(os.path.join(target_dir, file)).read()), indent=2)

          pprint.pprint(ast_trees, width=100, compact=False)
          EOF

  prebuild:
    name: Prebuild environment
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    needs:
      - actionlint
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
      - name: Restore cache node-electron dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node${{ env.node-version }}-electron-deps-${{ hashFiles('**/package-lock.json') }}
      - name: Install stlite
        run: |
          npm install

  build:
    name: Build desktop-app
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    needs:
      - test
      - prebuild
    continue-on-error: ${{ matrix.os == 'windows-latest' }}
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
      - name: Restore cache node-electron dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node${{ env.node-version }}-electron-deps-${{ hashFiles('**/package-lock.json') }}
      - name: Restore cache electron-builder (Windows)
        # https://github.com/electron/get#usage
        uses: actions/cache@v4
        with:
          path: |
            %LOCALAPPDATA%/electron/Cache
            ~/AppData/Local/electron/Cache/
          key: ${{ runner.os }}-node-electron-builder-${{ hashFiles('**/package-lock.json') }}
        if: ${{ runner.os == 'Windows' }}
      - name: Restore cache electron-builder (MacOS)
        # https://github.com/electron/get#usage
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/electron/
          key: ${{ runner.os }}-node-electron-builder-${{ hashFiles('**/package-lock.json') }}
        if: ${{ runner.os == 'MacOS' }}
      - name: Dump package
        run: |
          npm run dump
        # TODO: stliteのWindows環境のビルド失敗が解消したら削除
        if: ${{ runner.os == 'MacOS' }}
      - name: Build
        run: |
          npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # TODO: stliteのWindows環境のビルド失敗が解消したら削除
        if: ${{ runner.os == 'MacOS' }}
      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build-artifact
          path: ./dist/*.exe
          retention-days: 3
          compression-level: 9
        if: ${{ runner.os == 'Windows' }}
      - name: Upload artifact (MacOS)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build-artifact
          path: ./dist/*.dmg
          retention-days: 3
          compression-level: 9
        if: ${{ runner.os == 'MacOS' }}
