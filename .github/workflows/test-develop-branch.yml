# コードにハッシュ検証ポリシーを追加
# SECURITY NOTE FOR REVIEWERS:
# All external actions in this workflow are pinned to specific versions.
# We use either:
# 1. Verified tags (vX.Y.Z) from trusted publishers
# 2. Specific commit SHAs when tags are not preferred
#
# When updating any action, always:
# - Check for security advisories for the action
# - Verify the publisher's reputation
# - Test the new version in a controlled environment first
# - Update this policy comment with any changes
---
name: Test & Build

on:
  push:
    branches:
      - develop
    paths-ignore:
      - .devcontainer/**
      - assets/**
      - README.md
      - .gitignore
      - .cz_config.js
      - .pre-commit-config.yaml
      - "**.code-workspace"
  pull_request:
    branches:
      - main
      - develop

defaults:
  run:
    shell: bash

env:
  python-version: 3.12.3
  node-version: 22

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================
  # SECURITY CHECKS GROUP
  # ============================================================
  security-dependency-review:
    name: Security - Dependency Review
    runs-on: ubuntu-latest
    # Pull Requestの場合のみ実行するように設定
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Check out Git repository
        # v4.1.1を使用 (OIDCトークン対応、安定版)
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      - name: Dependency Review
        # v3.1.4を使用 (最新の安定版)
        uses: actions/dependency-review-action@v3.1.4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true
          # Pull Requestのコンテキストからbase_refとhead_refを取得
          base-ref: ${{ github.event.pull_request.base.ref }}
          head-ref: ${{ github.event.pull_request.head.ref }}
      - name: Report Status
        run: |
          {
            echo "### Security Dependency Review Complete"
            echo "Scanned for vulnerable dependencies in PR changes."
          } >> "$GITHUB_STEP_SUMMARY"

  security-npm-audit:
    name: Security - NPM Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      - name: Install Node.js
        # actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 = v4.0.1
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8
        with:
          node-version: ${{ env.node-version }}
      - name: NPM Audit
        run: |
          # npm auditを実行（高リスクの脆弱性のみ失敗とする）
          echo "### NPM Audit Results" >> "$GITHUB_STEP_SUMMARY"
          npm audit --production --audit-level=high || {
            echo "::warning::High severity vulnerabilities found in production dependencies"
            echo "⚠️ High severity vulnerabilities found in production dependencies" >> "$GITHUB_STEP_SUMMARY"
            npm audit --production --audit-level=high >> "$GITHUB_STEP_SUMMARY"
          }
      - name: Report Status
        run: |
          echo "### Security NPM Security Audit Complete" >> "$GITHUB_STEP_SUMMARY"

  # ============================================================
  # LINT CHECKS GROUP
  # ============================================================
  lint-workflow:
    name: Lint - Workflow Files
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Download and run actionlint
        run: |
          # バイナリのダウンロードとインストール
          curl -sSLo actionlint.bash https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash
          # ダウンロードしたバッシュスクリプトに実行権限を与えて実行
          chmod +x actionlint.bash
          ./actionlint.bash
          # actionlintを実行
          ./actionlint -color
      - name: Check typos
        # v1.16.8を使用 (安定版)
        uses: crate-ci/typos@v1.16.8
      - name: Report Status
        run: |
          {
            echo "### Workflow Lint Passed"
            echo "All GitHub Actions workflow files are valid."
          } >> "$GITHUB_STEP_SUMMARY"

  lint-python:
    name: Lint - Python Code
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Python ${{ env.python-version }}
        # v5.1.0を使用 (最新の安定版)
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ env.python-version }}
      - name: Restore cache pip dependencies
        # v4.2.2を使用 (最新の安定版)
        uses: actions/cache@v4.2.2
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python${{ env.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python${{ env.python-version }}-poetry
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        shell: bash
      - name: Configure poetry
        run: poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install --no-interaction --no-root --only main,dev
      - name: Check for vulnerable dependencies
        run: |
          poetry run pip install safety
          poetry run safety check
      - name: Run Python Linters
        run: |
          poetry run ruff check .
          poetry run mypy .
      - name: Report Status
        run: |
          {
            echo "### Python Lint Passed"
            echo "All Python files pass linting requirements."
          } >> "$GITHUB_STEP_SUMMARY"

  # ============================================================
  # TESTS GROUP
  # ============================================================
  test-unit:
    name: Test - Unit
    runs-on: ubuntu-latest
    needs: [lint-workflow, lint-python]
    timeout-minutes: 10
    permissions:
      contents: read
      checks: write # テスト結果出力用の権限を追加
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ env.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4.2.2
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python${{ env.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python${{ env.python-version }}-poetry
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        shell: bash
      - name: Configure poetry
        run: poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install --no-interaction --no-root --only main,dev
      - name: Run Unit Tests
        run: |
          # 通常のテスト実行（カバレッジ有、ベンチマークなし）
          poetry run pytest --cov=app.py --cov=features --cov=i18n --cov=scripts --cov-report=xml --cov-report=term -n 2 --dist loadfile --durations=10 --cache-clear --maxfail=5 --verbose -k "not e2e" --benchmark-disable
      - name: Report Status
        run: |
          {
            echo "### Unit Tests Passed"
            echo "All unit tests passing with coverage."
          } >> "$GITHUB_STEP_SUMMARY"

  test-e2e:
    name: Test - E2E (${{ matrix.os }} / ${{ matrix.python-version }} / ${{ matrix.browser }})
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - ubuntu-22.04
          - ubuntu-20.04
        python-version:
          - 3.12.3
          - 3.11
        browser:
          - chromium
          - firefox
          - webkit
        exclude:
          # UbuntuとWebkit、Chromiumの組み合わせを除外
          - os: ubuntu-latest
            browser: webkit
          - os: ubuntu-22.04
            browser: webkit
          - os: ubuntu-20.04
            browser: webkit
          - os: ubuntu-latest
            browser: chromium
          - os: ubuntu-22.04
            browser: chromium
          - os: ubuntu-20.04
            browser: chromium
          # WindowsとWebkitの組み合わせを除外
          - os: windows-latest
            browser: webkit
        include:
          # Windowsのみタイムアウト時間を15分に設定（Webkitは除外）
          - os: windows-latest
            python-version: 3.12.3
            browser: chromium
            timeout-minutes: 15
          - os: windows-latest
            python-version: 3.11
            browser: chromium
            timeout-minutes: 15
          - os: windows-latest
            python-version: 3.12.3
            browser: firefox
            timeout-minutes: 15
          - os: windows-latest
            python-version: 3.11
            browser: firefox
            timeout-minutes: 15
          # 最も一般的な環境を優先的にテスト
          - os: macos-latest
            python-version: 3.12.3
            browser: chromium
            priority: high
      max-parallel: 10
    runs-on: ${{ matrix.os }}
    needs: [test-unit]
    permissions:
      contents: read
    timeout-minutes: ${{ matrix.timeout-minutes || 10 }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4.2.2
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
            %LOCALAPPDATA%\pypoetry\Cache
            %USERPROFILE%\.cache\pypoetry
          key: ${{ matrix.os }}-python${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ matrix.os }}-python${{ matrix.python-version }}-poetry
      - name: Install Poetry (Windows)
        if: ${{ runner.os == 'Windows' }}
        # v1.3.4を使用 (最新の安定版)
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Bootstrap poetry (Non-Windows)
        if: matrix.os != 'Windows'
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH (Non-Windows)
        if: runner.os != 'Windows'
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        shell: bash
      - name: Configure poetry (Non-Windows)
        if: matrix.os != 'Windows'
        run: |
          poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install --no-interaction --no-root --only main,dev
      - name: Cache Playwright browsers
        # v4.2.2を使用 (最新の安定版)
        uses: actions/cache@v4.2.2
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            /home/runner/.cache/ms-playwright
            /Users/runner/Library/Caches/ms-playwright
            %USERPROFILE%\AppData\Local\ms-playwright
          key: ${{ matrix.os }}-playwright-${{ matrix.browser }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Playwright Browser
        run: |
          poetry run playwright install --with-deps ${{ matrix.browser }}

      # E2Eテスト用のファイルハッシュを計算
      - name: Generate hash for E2E test files (Unix)
        id: e2e-hash
        if: runner.os != 'Windows'
        run: |
          # E2Eテストに影響するファイルのハッシュを計算
          HASH=$(find app.py features i18n.py tests/e2e -type f -name "*.py" -o -name "*.j2" -o -name "*.csv" -o -name "*.yaml" -o -name "*.txt" | sort | xargs cat | sha256sum | cut -d ' ' -f 1)
          echo "hash=${HASH}" >> "$GITHUB_OUTPUT"
          echo "E2E test files hash: ${HASH}"
        shell: bash

      - name: Generate hash for E2E test files (Windows)
        id: e2e-hash-win
        if: runner.os == 'Windows'
        run: |
          # Windows用のハッシュ計算
          $files = Get-ChildItem -Path app.py,features,i18n.py,tests\e2e -Recurse -Include *.py,*.j2,*.csv,*.yaml,*.txt | Sort-Object -Property FullName
          $content = $files | Get-Content | Out-String
          $hash = (Get-FileHash -InputStream ([System.IO.MemoryStream]::new([System.Text.Encoding]::UTF8.GetBytes($content))) -Algorithm SHA256).Hash.ToLower()
          echo "hash=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "E2E test files hash: $hash"
        shell: pwsh

      # ハッシュ値を統合
      - name: Set combined hash
        id: combined-hash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            HASH="${{ steps.e2e-hash-win.outputs.hash }}"
          else
            HASH="${{ steps.e2e-hash.outputs.hash }}"
          fi
          echo "hash=${HASH}" >> "$GITHUB_OUTPUT"
          echo "Combined hash: ${HASH}"
        shell: bash

      # E2Eテスト結果のキャッシュを復元
      - name: Restore E2E test results cache
        # v4.2.2を使用 (最新の安定版)
        uses: actions/cache@v4.2.2
        id: e2e-cache
        with:
          path: |
            .pytest_cache
            .benchmarks
          key: e2e-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}-${{ steps.combined-hash.outputs.hash }}

      - name: Configure Windows for UTF-8
        if: runner.os == 'Windows'
        run: |
          # Windows環境でUTF-8を使用するための設定
          chcp 65001
        shell: cmd

      - name: E2E Tests (not chromium)
        if: |
          matrix.browser != 'chromium' && steps.e2e-cache.outputs.cache-hit != 'true'
        run: |
          # E2Eテスト実行（ベンチマークなし）
          poetry run pytest -vv --browser ${{ matrix.browser }} -m "benchmark" --benchmark-disable
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1

      - name: E2E Tests with benchmark (Chromium only)
        if: |
          matrix.browser == 'chromium' && steps.e2e-cache.outputs.cache-hit != 'true'
        run: |
          # E2Eテストのベンチマーク実行（Chromiumのみ）
          poetry run pytest -vv --browser ${{ matrix.browser }} -m "benchmark" --benchmark-verbose --benchmark-save=github-actions-${{ matrix.browser }} --benchmark-columns=min,max,mean,stddev,median,ops --benchmark-sort=mean --benchmark-histogram=none
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1

      - name: Skip E2E Tests (Cache Hit)
        if: steps.e2e-cache.outputs.cache-hit == 'true'
        run: |
          echo "E2E tests skipped - using cached results from previous run with identical code"
          echo "Cache key: e2e-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}-${{ steps.combined-hash.outputs.hash }}"
          echo "::notice::E2E tests skipped - using cached results (no code changes detected)"
          {
            echo "### E2E Tests Skipped - Using Cached Results"
            echo "No changes detected in E2E test files or application code."
            echo "Cache key: \`e2e-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}-${{ steps.combined-hash.outputs.hash }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # E2Eテスト結果のキャッシュを保存（テスト実行後）
      - name: Save E2E test results cache
        if: steps.e2e-cache.outputs.cache-hit != 'true'
        # v4.2.2を使用 (安定版)
        uses: actions/cache/save@v4.2.2
        with:
          path: |
            .pytest_cache
            .benchmarks
          key: e2e-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}-${{ steps.combined-hash.outputs.hash }}

      # E2Eテスト実行結果をサマリーに表示
      - name: Add E2E test execution summary
        if: steps.e2e-cache.outputs.cache-hit != 'true'
        run: |
          echo "::notice::E2E tests executed - results cached for future runs"
          {
            echo "### E2E Tests Executed"
            echo "Test results have been cached for future runs with the same code."
            echo "Cache key: \`e2e-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}-${{ steps.combined-hash.outputs.hash }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

  # ============================================================
  # ANALYZE GROUP
  # ============================================================
  analyze-code:
    name: Analysis - Code Complexity
    # https://github.com/terryyin/lizard
    runs-on: ubuntu-latest
    needs: [lint-workflow, lint-python]
    permissions:
      contents: read
    env:
      LIZARD_CCN_COUNT: 10
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ env.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4.2.2
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
            %LOCALAPPDATA%\pypoetry\Cache
            %USERPROFILE%\.cache\pypoetry
          key: ${{ runner.os }}-python${{ env.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python${{ env.python-version }}-poetry
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        shell: bash
      - name: Configure poetry
        run: poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install --no-interaction --no-root --only main,dev
      - name: Run lizard (analyze CCN for production codes)
        run: |
          poetry run lizard -x "./node_modules/*" -x "./.venv/*" -x "./build/*" -x "./dist/*" -x "./htmlcov/*" -x "./tests/*" --CCN "${LIZARD_CCN_COUNT}"
      - name: Show AST (app.py)
        run: |
          python <<EOF
          import ast
          print(ast.dump(ast.parse(open("app.py").read()), indent=2))
          EOF
      - name: Show AST (features/*.py)
        run: |
          python <<EOF
          import ast
          import os
          import pprint

          target_dir = "./features"
          ast_trees = {}
          for file in os.listdir(target_dir):
              if file.endswith(".py"):
                  ast_trees[file] = ast.dump(ast.parse(open(os.path.join(target_dir, file)).read()), indent=2)

          pprint.pprint(ast_trees, width=100, compact=False)
          EOF
      - name: Report Status
        run: |
          {
            echo "### Code Analysis Complete"
            echo "Code complexity and AST analysis performed successfully."
          } >> "$GITHUB_STEP_SUMMARY"

  # ============================================================
  # BUILD GROUP
  # ============================================================
  build-desktop:
    name: Build - Desktop (${{ matrix.os }})
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.os == 'windows-latest' }}
    needs: [test-unit, security-npm-audit] # NPM監査が成功した場合のみビルド
    permissions:
      contents: read
      security-events: write # セキュリティイベントの書き込み権限を追加
    timeout-minutes: 5
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
      - name: Restore cache node-electron dependencies
        uses: actions/cache@v4.2.2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node${{ env.node-version }}-electron-deps-${{ hashFiles('**/package-lock.json') }}
      - name: Install stlite
        run: |
          npm install
      - name: Restore cache electron-builder (Windows)
        # https://github.com/electron/get#usage
        uses: actions/cache@v4.2.2
        with:
          path: |
            %LOCALAPPDATA%/electron/Cache
            ~/AppData/Local/electron/Cache/
          key: ${{ runner.os }}-node-electron-builder-${{ hashFiles('**/package-lock.json') }}
        if: ${{ runner.os == 'Windows' }}
      - name: Restore cache electron-builder (MacOS)
        # https://github.com/electron/get#usage
        uses: actions/cache@v4.2.2
        with:
          path: |
            ~/Library/Caches/electron/
          key: ${{ runner.os }}-node-electron-builder-${{ hashFiles('**/package-lock.json') }}
        if: ${{ runner.os == 'MacOS' }}
      - name: Dump package
        run: |
          npm run dump
        # TODO: stliteのWindows環境のビルド失敗が解消したら削除
        if: ${{ runner.os == 'MacOS' }}
      - name: Build
        run: |
          npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NODE_OPTIONSにセキュリティ強化オプションを追加
          NODE_OPTIONS: "--max-http-header-size=8192 --max-old-space-size=4096"
        # TODO: stliteのWindows環境のビルド失敗が解消したら削除
        if: ${{ runner.os == 'MacOS' }}
      - name: Upload artifact (Windows)
        # v4.3.1を使用 (最新の安定版)
        uses: actions/upload-artifact@v4.3.1
        with:
          name: ${{ runner.os }}-build-artifact
          path: ./dist/*.exe
          retention-days: 3
          compression-level: 9
        if: ${{ runner.os == 'Windows' }}
      - name: Upload artifact (MacOS)
        # v4.3.1を使用 (最新の安定版)
        uses: actions/upload-artifact@v4.3.1
        with:
          name: ${{ runner.os }}-build-artifact
          path: ./dist/*.dmg
          retention-days: 3
          compression-level: 9
        if: ${{ runner.os == 'MacOS' }}
      - name: Report Status
        run: |
          {
            echo "### Desktop Build Complete"
            echo "Desktop application built successfully for ${{ runner.os }}."
          } >> "$GITHUB_STEP_SUMMARY"

  # ============================================================
  # WORKFLOW SUMMARY
  # ============================================================
  workflow-summary:
    name: Workflow Summary
    if: always()
    needs:
      [
        security-dependency-review,
        security-npm-audit,
        lint-workflow,
        lint-python,
        test-unit,
        test-e2e,
        analyze-code,
        build-desktop,
      ]
    runs-on: ubuntu-latest
    steps:
      - run: |
          {
            echo "### Workflow Summary"
            echo ""
            echo "| Category | Job | Status |"
            echo "| --- | --- | --- |"
            echo "| Security | Dependency Review | ${{ needs.security-dependency-review.result == 'success' && '✅ Passed' || (github.event_name != 'pull_request' && '➖ Skipped') || '❌ Failed' }} |"
            echo "| Security | NPM Audit | ${{ needs.security-npm-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
            echo "| Lint | Workflow Files | ${{ needs.lint-workflow.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
            echo "| Lint | Python Code | ${{ needs.lint-python.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
            echo "| Test | Unit Tests | ${{ needs.test-unit.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
            echo "| Test | E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
            echo "| Analysis | Code Complexity | ${{ needs.analyze-code.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
            echo "| Build | Desktop App | ${{ needs.build-desktop.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
          } >> "$GITHUB_STEP_SUMMARY"
