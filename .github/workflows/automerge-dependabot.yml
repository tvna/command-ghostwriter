---
name: Auto-merge for dependabot

on:
  pull_request:
    branches:
      - develop

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  merge:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read
    timeout-minutes: 20
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false
          allowed-endpoints: |
            api.github.com:443
            github.com:443

      - name: Dependabot metadata
        id: meta
        uses: dependabot/fetch-metadata@v2.3.0

      - name: Wait for Test & Build workflow
        timeout-minutes: 30
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const ref = context.payload.pull_request.head.sha;
            const check_name = 'Workflow summary [Test & Build (on pull request)]';
            const max_attempts = 60; // 60 attempts * 30 seconds = 30 minutes
            const poll_interval_ms = 30000; // 30 seconds

            console.log(`Waiting for check run "${check_name}" on ref ${ref} to complete...`);

            for (let attempt = 0; attempt < max_attempts; attempt++) {
              const { data: checks } = await github.rest.checks.listForRef({
                owner,
                repo,
                ref,
                check_name,
                per_page: 1 // We only need the latest run for this specific check name
              });

              if (checks.total_count > 0) {
                const checkRun = checks.check_runs[0];
                console.log(`Attempt ${attempt + 1}/${max_attempts}: Check run status is ${checkRun.status}, conclusion is ${checkRun.conclusion}`);

                if (checkRun.status === 'completed') {
                  if (checkRun.conclusion === 'success') {
                    console.log(`Check run "${check_name}" completed successfully.`);
                    return; // Success
                  } else {
                    core.setFailed(`Check run "${check_name}" completed with conclusion: ${checkRun.conclusion}`);
                    return; // Failure or other non-success conclusion
                  }
                }
              } else {
                 console.log(`Attempt ${attempt + 1}/${max_attempts}: No check run named "${check_name}" found yet.`);
              }

              await new Promise(r => setTimeout(r, poll_interval_ms));
            }

            core.setFailed(`Timeout waiting for check run "${check_name}" to complete after ${max_attempts} attempts.`);

      - name: Approve and auto-merge
        if: |
          steps.meta.outputs.package-ecosystem == 'github-actions' ||
          steps.meta.outputs.package-ecosystem == 'pip' ||
          steps.meta.outputs.package-ecosystem == 'npm_and_yarn'
        run: |
          gh pr review "$PR_URL" --approve
          gh pr merge --auto --merge "$PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
