name: Create PR to main

on:
  workflow_call: {}

permissions:
  contents: read

jobs:
  get-npm-version-from-main:
    outputs:
      version: ${{ steps.package-version-from-main.outputs.current-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: true

      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Get version from main
        id: package-version-from-main
        uses: step-security/npm-get-version-action@v1

      - run: |
          echo "The current version is '${{ steps.package-version-from-main.outputs.current-version }}'."
          echo "version='${{ steps.package-version-from-main.outputs.current-version }}'" >> "$GITHUB_OUTPUT"

  get-npm-version-from-develop:
    outputs:
      version: ${{ steps.package-version-from-develop.outputs.current-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: true

      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Get version from develop
        id: package-version-from-develop
        uses: step-security/npm-get-version-action@v1

      - name: Display the version
        run: |
          echo "The current version is '${{ steps.package-version-from-develop.outputs.current-version }}'."
          echo "version='${{ steps.package-version-from-develop.outputs.current-version }}'" >> "$GITHUB_OUTPUT"

  create-pr-to-main:
    needs:
      - get-npm-version-from-main
      - get-npm-version-from-develop
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false

      - name: Dump GitHub context
        id: github_context_step
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT" | jq -r '. | {event_name, workflow_ref, repository, run_id, run_number}'

      - name: Compare versions (Semver)
        uses: step-security/semver-utils@v4
        id: compare-versions
        with:
          version: ${{ needs.get-npm-version-from-develop.outputs.version }}
          compare-to: ${{ needs.get-npm-version-from-main.outputs.version }}
          satisfies: 1.x

      - name: Display version information
        run: |
          echo "${{ steps.compare-versions.outputs.release }}"
          echo "${{ steps.compare-versions.outputs.major }}"
          echo "${{ steps.compare-versions.outputs.minor }}"
          echo "${{ steps.compare-versions.outputs.patch }}"
          echo "${{ steps.compare-versions.outputs.build }}"
          echo "${{ steps.compare-versions.outputs.build-parts }}"
          echo "${{ steps.compare-versions.outputs.comparison-result }}"
          echo "${{ steps.compare-versions.outputs.satisfies }}"
          echo "${{ steps.compare-versions.outputs.inc-major }}"
          echo "${{ steps.compare-versions.outputs.inc-premajor }}"
          echo "${{ steps.compare-versions.outputs.inc-minor }}"
          echo "${{ steps.compare-versions.outputs.inc-preminor }}"
          echo "${{ steps.compare-versions.outputs.inc-patch }}"
          echo "${{ steps.compare-versions.outputs.inc-prepatch }}"
          echo "${{ steps.compare-versions.outputs.inc-prerelease }}"

      - name: Check if PR already exists
        id: check-pr
        if: steps.compare-versions.outputs.comparison-result == '<'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const pulls = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:develop`,
                base: 'main',
                state: 'open'
              });

              const prExists = pulls.data.length;
              console.log(`既存のオープンPR: ${prExists}`);
              core.setOutput('exists', prExists.toString());
              core.setOutput('success', 'true');
            } catch (error) {
              console.error(`PRの確認中にエラーが発生しました: ${error.message}`);
              core.setOutput('exists', '');
              core.setOutput('success', 'false');
              core.setFailed(`PRの確認中にエラーが発生しました: ${error.message}`);
            }

      - name: Ensure labels exist
        id: ensure-labels
        if: |
          steps.check-pr.outputs.success == 'true' &&
          steps.check-pr.outputs.exists == '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let success = true;

            // ラベルを確認し、必要に応じて作成する関数
            async function ensureLabel(name, description, color) {
              try {
                // ラベルがすでに存在するか確認
                try {
                  await github.rest.issues.getLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: name
                  });
                  console.log(`ラベル '${name}' はすでに存在します`);
                  return true;
                } catch (error) {
                  // ラベルが存在しない場合は作成
                  if (error.status === 404) {
                    console.log(`ラベル '${name}' を作成します`);
                    await github.rest.issues.createLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: name,
                      description: description,
                      color: color
                    });
                    console.log(`ラベル '${name}' を作成しました`);
                    return true;
                  } else {
                    throw error;
                  }
                }
              } catch (error) {
                console.log(`ラベル '${name}' の確認/作成中にエラーが発生しました: ${error.message}`);
                success = false;
                return false;
              }
            }

            console.log("::notice::ラベルの確認中...");

            try {
              // automated-pr ラベルの確認と作成
              const automatedResult = await ensureLabel("automated-pr", "自動生成されたPR", "0E8A16");

              // release ラベルの確認と作成
              const releaseResult = await ensureLabel("release", "自動リリース用PR", "1D76DB");

              if (automatedResult && releaseResult) {
                core.setOutput('success', 'true');
              } else {
                core.setOutput('success', 'false');
                if (!success) {
                  core.setFailed("一部のラベルの作成に失敗しました");
                }
              }
            } catch (error) {
              console.error(`ラベル処理中に予期しないエラーが発生しました: ${error.message}`);
              core.setOutput('success', 'false');
              core.setFailed(`ラベル処理中に予期しないエラーが発生しました: ${error.message}`);
            }

      - name: Create Pull Request
        id: create-pr
        if: |
          steps.compare-versions.outputs.comparison-result == '<' &&
          steps.check-pr.outputs.success == 'true' &&
          steps.check-pr.outputs.exists == '0' &&
          (steps.ensure-labels.outcome == 'success' || steps.ensure-labels.outputs.success == 'true')
        env:
          NEW_VERSION: ${{ needs.get-npm-version-from-main.outputs.version }}
          OLD_VERSION: ${{ needs.get-npm-version-from-develop.outputs.version }}
          GITHUB_OUTPUT: ${{ env.GITHUB_OUTPUT }}
        run: |
          python scripts/create_pr.py

      # 結果の通知
      - name: Notify PR creation success
        id: notify-success
        if: steps.create-pr.outcome == 'success' && steps.create-pr.outputs.pr_url != ''
        run: |
          echo "::notice::PR作成成功: ${{ steps.create-pr.outputs.pr_url }}"

      - name: Notify existing PR
        id: notify-existing-pr
        if: steps.check-pr.outputs.success == 'true' && steps.check-pr.outputs.exists != '0'
        run: |
          echo "::notice::既存のPRが見つかりました - 新規PRは作成されませんでした"

      - name: Notify error
        if: |
          (steps.check-pr.outputs.success == 'false') ||
          (steps.ensure-labels.outputs.success == 'false' && steps.check-pr.outputs.exists == '0')
        run: |
          echo "::error::ワークフロー実行中にエラーが発生しました"
