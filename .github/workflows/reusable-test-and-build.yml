# コードにハッシュ検証ポリシーを追加
# SECURITY NOTE FOR REVIEWERS:
# All external actions in this workflow are pinned to specific versions.
# We use either:
# 1. Verified tags (vX.Y.Z) from trusted publishers
# 2. Specific commit SHAs when tags are not preferred
#
# When updating any action, always:
# - Check for security advisories for the action
# - Verify the publisher's reputation
# - Test the new version in a controlled environment first
# - Update this policy comment with any changes
---
name: Reusable Test & Build

on:
  workflow_call:
    inputs:
      concurrency_group:
        required: true
        type: string
      concurrency_cancel_in_progress:
        required: true
        type: boolean
      workflow_summary_name:
        required: true
        type: string

defaults:
  run:
    shell: bash

env:
  GLOBAL_PYTHON_VERSION: 3.12.3
  GLOBAL_NODE_VERSION: 22
  GLOBAL_ALLOWED_ENDPOINTS: |
    api.github.com:443
    github.com:443
    objects.githubusercontent.com:443
    registry.npmjs.org:443
    pypi.org:443
    files.pythonhosted.org:443
    playwright.azureedge.net:443

concurrency:
  group: ${{ inputs.concurrency_group }}
  cancel-in-progress: ${{ inputs.concurrency_cancel_in_progress }}

permissions:
  contents: read

jobs:
  # ============================================================
  # GUARD CLAUSE GROUP
  # ============================================================

  guard-workflow:
    name: Guard workflow files
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Download and run actionlint
        run: |
          # バイナリのダウンロードとインストール
          curl -sSLo actionlint.bash https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash
          # ダウンロードしたバッシュスクリプトに実行権限を与えて実行
          chmod +x actionlint.bash
          ./actionlint.bash
          # actionlintを実行
          ./actionlint -color

      - name: Check typos
        uses: crate-ci/typos@d08e4083f112e684fb88f6babd9ae60a1f1cd84f # v1.30.3

  guard-api-key:
    name: Guard API Key
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set GITHUB_TOKEN
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> "$GITHUB_ENV"

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2.3.7

  guard-python:
    name: Guard Python
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}
        timeout-minutes: 10

      - name: Lint Python and check types
        run: |
          poetry run ruff check .
          poetry run mypy .

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"

  guard-npm:
    name: Guard NPM
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Node.js and restore cache
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.GLOBAL_NODE_VERSION }}
        timeout-minutes: 10

      - name: NPM Audit
        run: |
          # npm auditを実行（高リスクの脆弱性のみ失敗とする）
          echo "### NPM Audit Results" >> "$GITHUB_STEP_SUMMARY"
          npm audit --production --audit-level=high || {
            echo "::warning::High severity vulnerabilities found in production dependencies"
            echo "⚠️ High severity vulnerabilities found in production dependencies" >> "$GITHUB_STEP_SUMMARY"
            npm audit --production --audit-level=high >> "$GITHUB_STEP_SUMMARY"
          }

  # ============================================================
  # TESTS GROUP
  # ============================================================

  test-unit:
    name: Test - Unit
    needs:
      - guard-workflow
      - guard-api-key
      - guard-python
      - guard-npm
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - ubuntu-22.04
          - windows-latest
        python-version:
          - "3.13"
          - "3.12"
          - "3.11"
    timeout-minutes: 5

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}
        timeout-minutes: 10

      - name: Run Unit Tests
        run: |
          # 通常のテスト実行（カバレッジ有、ベンチマークなし）
          poetry run pytest -n auto --cov=app.py --cov=features --cov=i18n --cov=scripts --cov-report=xml --cov-report=term --dist loadfile --durations=10 --cache-clear --maxfail=5 --verbose -k "not e2e" --benchmark-disable

  test-e2e:
    name: Test - E2E by ${{ matrix.os }}
    needs: test-unit
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - windows-latest
        browser:
          - chromium
          - firefox
          - webkit
        exclude:
          # WindowsとWebkitの組み合わせを除外
          - os: windows-latest
            browser: webkit
      max-parallel: 10

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: false
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}
        timeout-minutes: 5

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1
        timeout-minutes: 3

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}
        timeout-minutes: 10

      - name: Setup Playwright by Python
        uses: ./.github/actions/setup-python-playwright
        with:
          browser: ${{ matrix.browser }}
        timeout-minutes: 10

      - name: Configure Windows for UTF-8
        if: runner.os == 'Windows'
        run: |
          # Windows環境でUTF-8を使用するための設定
          chcp 65001
        shell: cmd
        timeout-minutes: 1

      - name: E2E Tests (${{ matrix.os }} / ${{ matrix.browser }})
        id: e2e-not-chromium
        run: |
          # E2Eテスト実行（ベンチマークなし）
          poetry run pytest -n auto -vv --browser ${{ matrix.browser }} -m "e2e" --benchmark-disable
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1
        continue-on-error: true
        timeout-minutes: 10

      - name: Retry E2E Tests
        if: steps.e2e-not-chromium.outcome == 'failure'
        id: e2e-not-chromium-retry
        run: |
          # E2Eテストに失敗した場合、再実行（ベンチマークなし）
          poetry run pytest -n auto -vv --browser ${{ matrix.browser }} -m "e2e" --benchmark-disable
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1
        timeout-minutes: 10

  test-e2e-benchmark:
    name: Test - E2E Benchmark by ${{ matrix.os }})
    needs: [test-unit]
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - windows-latest
        browser:
          - chromium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: false
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}
        timeout-minutes: 5

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1
        timeout-minutes: 3

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}
        timeout-minutes: 10

      - name: Setup Playwright by Python
        uses: ./.github/actions/setup-python-playwright
        with:
          browser: ${{ matrix.browser }}
        timeout-minutes: 10

      - name: Configure Windows for UTF-8
        if: runner.os == 'Windows'
        run: |
          # Windows環境でUTF-8を使用するための設定
          chcp 65001
        shell: cmd
        timeout-minutes: 1

      - name: E2E benchmark (Chromium)
        if: matrix.browser == 'chromium'
        id: e2e-chromium-benchmark
        run: |
          # E2Eテストのベンチマーク実行（Chromiumのみ)
          poetry run pytest -n 0 -vv --browser ${{ matrix.browser }} -m "e2e" --benchmark-verbose --benchmark-only --benchmark-save=github-actions-${{ matrix.browser }} --benchmark-columns=min,max,mean,stddev,median,ops --benchmark-sort=mean
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1
        continue-on-error: true
        timeout-minutes: 30

      - name: Retry E2E Tests with benchmark (Chromium without test-e2e)
        if: matrix.browser == 'chromium' && steps.e2e-chromium-benchmark.outcome == 'failure'
        id: e2e-chromium-benchmark-retry
        run: |
          # E2Eテストのベンチマーク実行（Chromiumのみ)
          poetry run pytest -n 0 -vv --browser ${{ matrix.browser }} -m "e2e" --benchmark-verbose --benchmark-only --benchmark-save=github-actions-${{ matrix.browser }} --benchmark-columns=min,max,mean,stddev,median,ops --benchmark-sort=mean
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1
        timeout-minutes: 30

      - name: Upload Benchmark Results
        if: matrix.browser == 'chromium'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: benchmark-results-${{ matrix.os }}-${{ env.GLOBAL_PYTHON_VERSION }}-${{ matrix.browser }}
          path: .benchmarks/**/*
          retention-days: 90
          if-no-files-found: warn
        timeout-minutes: 5

  # ============================================================
  # ANALYSIS GROUP
  # ============================================================

  # https://github.com/terryyin/lizard
  analysis-code-ccn:
    name: Analysis - Code Complexity
    needs: test-unit
    env:
      LIZARD_CCN_COUNT: 10
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}
        timeout-minutes: 10

      - name: Run lizard (analyze CCN for production codes)
        run: |
          poetry run lizard -x "./node_modules/*" -x "./.venv/*" -x "./build/*" -x "./dist/*" -x "./htmlcov/*" -x "./tests/*" --CCN "${LIZARD_CCN_COUNT}"

      - name: Show AST (app.py)
        run: |
          python <<EOF
          import ast
          print(ast.dump(ast.parse(open("app.py").read()), indent=2))
          EOF

      - name: Show AST (features/*.py)
        run: |
          python <<EOF
          import ast
          import os
          import pprint
          target_dir = "./features"
          ast_trees = {}
          for file in os.listdir(target_dir):
              if file.endswith(".py"):
                  ast_trees[file] = ast.dump(ast.parse(open(os.path.join(target_dir, file)).read()), indent=2)
          pprint.pprint(ast_trees, width=100, compact=False)
          EOF

  # ============================================================
  # BUILD GROUP
  # ============================================================

  build-desktop:
    name: Build - Desktop (${{ matrix.os }})
    needs: test-unit
    continue-on-error: ${{ matrix.os == 'windows-latest' }}
    permissions:
      contents: read
      security-events: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
    timeout-minutes: 10

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}

      - name: Check out Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Node.js and cache
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.GLOBAL_NODE_VERSION }}
        timeout-minutes: 10

      - name: Build by stlite
        uses: ./.github/actions/build-stlite
        with:
          os: ${{ matrix.os }}

  # ============================================================
  # WORKFLOW SUMMARY
  # ============================================================

  workflow-summary:
    name: ${{ inputs.workflow_summary_name }}
    if: always()
    needs: [test-e2e, test-e2e-benchmark, analysis-code-ccn, build-desktop]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false
          allowed-endpoints: ${{ env.GLOBAL_ALLOWED_ENDPOINTS }}

      - run: |
          {
            # 総合結果の表示
            echo ""
            echo "## 総合結果"

            # いずれかのジョブが失敗した場合に失敗とする
            if [[ "${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
              echo "⚠️ **一部のジョブが失敗しました。詳細を確認してください。**"
            else
              echo "✅ **すべてのジョブが正常に完了しました**"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

          # ワークフロー全体の結果を設定 - いずれかのジョブが失敗した場合に失敗とする
          if [[ "${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "Some jobs have failed. See the summary for details."
            exit 1
          fi
