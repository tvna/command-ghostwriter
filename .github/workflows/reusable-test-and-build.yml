# GitHub Actions セキュリティポリシー: バージョン固定
# =====================================================
# 目的:
# このワークフローで使用される外部アクションは、サプライチェーン攻撃のリスクを低減するため、
# 特定のバージョン (コミットSHAまたは検証済みタグ vX.Y.Z) に固定されています。
# これにより、意図しない変更や悪意のあるコードの実行を防ぎます。
#
# 参照: https://docs.github.com/ja/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions
#
# アクション更新時の手順 (レビュアー向け):
# --------------------------------------
# 外部アクションのバージョンを更新する際は、以下の手順を**必ず**実施してください。
#
# 1. セキュリティアドバイザリの確認:
#    - 更新対象アクションに既知の脆弱性がないか確認します。
#    - (例: GitHub Advisory Database, Snyk Vulnerability Database)
#
# 2. 公開元の信頼性検証:
#    - アクションの公開元が信頼できる組織または個人であるか確認します。
#    - Verified Creator マークの有無などを参考にします。
#
# 3. テスト環境での事前検証:
#    - 更新後のバージョンを、まずテスト用ブランチやフォークしたリポジトリなどで動作検証します。
#    - 意図通りの動作をするか、他のステップに影響がないかを確認します。
#
# 4. ポリシーコメントの更新:
#    - 更新が安全であると確認できたら、このコメント内のバージョン情報 (例: `# vX.Y.Z` やコミットSHA) を更新します。
#    - 更新理由や検証内容をプルリクエストに記載することが推奨されます。
#
# 5. コミットSHAの利用:
#    - タグ (vX.Y.Z) よりもコミットSHAを優先的に使用します。
#    - タグは後から変更される可能性がありますが、コミットSHAは不変であるため、より安全です。
#
# - このポリシーコメント自体に変更があった場合も更新してください。
# =====================================================

---
name: Test and Build (dispatch)

on:
  workflow_call:
    inputs:
      concurrency_group:
        required: true
        type: string
      concurrency_cancel_in_progress:
        required: true
        type: boolean
      workflow_summary_name:
        required: true
        type: string
    outputs:
      build_succeeded:
        description: "Whether the build succeeded"
        value: ${{ jobs.workflow-summary.outputs.build_succeeded }}
    secrets:
      CODECOV_TOKEN:
        required: true
  workflow_dispatch:
    inputs:
      concurrency_group:
        required: false
        type: string
        default: "dispatch-test-and-build"
        description: "The concurrency group for the workflow dispatch"
      concurrency_cancel_in_progress:
        required: false
        type: boolean
        default: true
        description: "Whether to cancel in progress workflows"
      workflow_summary_name:
        required: false
        type: string
        default: "Workflow summary [Test & Build (dispatch)]"
        description: "The name of the workflow summary"

defaults:
  run:
    shell: bash

env:
  GLOBAL_ALLOWED_ENDPOINTS: |
    api.github.com:443
    github.com:443
    objects.githubusercontent.com:443
    registry.npmjs.org:443
    pypi.org:443
    files.pythonhosted.org:443
    playwright.azureedge.net:443
  GLOBAL_NODE_VERSION: ${{ vars.GLOBAL_NODE_VERSION }}
  GLOBAL_PYTHON_VERSION: ${{ vars.GLOBAL_PYTHON_VERSION }}
  ALL_FETCH_DEPTH: 0
  HARDEN_RUNNER_EGRESS_POLICY: block
  LIZARD_CCN_COUNT: 10

concurrency:
  group: ${{ inputs.concurrency_group }}
  cancel-in-progress: ${{ inputs.concurrency_cancel_in_progress }}

jobs:
  # ============================================================
  # GUARD CLAUSE GROUP
  # ============================================================

  guard-workflow:
    name: Guard workflow files
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            github.com:443
            objects.githubusercontent.com:443
            raw.githubusercontent.com:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Lint yaml files by yamllint
        run: |
          CONFIG="${RUNNER_TEMP}/.yamllint.yml"
          cat <<EOF >"${CONFIG}"
          extends: default
          rules:
            document-start: disable
            truthy:
              allowed-values: ["true", "false", "on"]
            comments:
              min-spaces-from-content: 1
            braces:
              max-spaces-inside: 1
            line-length:
              max: 250
          EOF
          if [ -e ".yamllint.yml" ]; then
            CONFIG=".yamllint.yml"
          fi
          yamllint --strict --format github --config-file "${CONFIG}" ./.github/

      - name: Download and run actionlint
        run: |
          # バイナリのダウンロードとインストール
          curl -sSLo actionlint.bash https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash
          # ダウンロードしたバッシュスクリプトに実行権限を与えて実行
          chmod +x actionlint.bash
          ./actionlint.bash
          # actionlintを実行
          ./actionlint -color

      - name: Check typos
        uses: crate-ci/typos@3be83342e28b9421997e9f781f713f8dde8453d2 # v1.31.2

  guard-api-key:
    name: Guard API Key
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            raw.githubusercontent.com:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: ALL_FETCH_DEPTH

      - name: Set GITHUB_TOKEN
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> "$GITHUB_ENV"

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2.3.9

      - name: Convert SARIF to Markdown Summary
        uses: ./.github/actions/convert-sarif-to-summary
        with:
          sarif-path: results.sarif
          summary-title: "Gitleaks Analysis Results"

  guard-python-code-quality:
    name: Guard Python code quality
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443
            install.python-poetry.org:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Lint Python and check types
        run: |
          poetry run mypy . -v

      - name: Check formatting
        run: |
          poetry run ruff check . -v

      - name: Run Vulture
        run: |
          poetry run vulture
        continue-on-error: true

      - name: Create requirements.txt
        id: create-requirements-txt-for-pyre
        shell: bash
        run: |
          pipx inject poetry poetry-plugin-export
          poetry export -f requirements.txt --only=main --output requirements.txt

      - name: Run Pyre Action
        uses: facebook/pyre-action@12b8d923443ea66cb657facc2e5faac1c8c86e64 # v0.0.2
        continue-on-error: true
        with:
          repo-directory: "./"
          requirements-path: "requirements.txt"

      - name: Convert SARIF to markdown summary
        uses: ./.github/actions/convert-sarif-to-summary
        with:
          sarif-path: sarif.json
          summary-title: "Pyre Static Analysis Results"

  guard-vulnerabilities:
    name: Guard vulnerabilities from remote repositories
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            mirror.gcr.io:443
            pypi.org:443
            registry.npmjs.org:443
            install.python-poetry.org:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Setup Node.js and restore cache
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.GLOBAL_NODE_VERSION }}

      - name: Run npm audit
        run: |
          # npm auditを実行 (高リスクの脆弱性のみ失敗とする)
          echo "### NPM Audit Results" >> "$GITHUB_STEP_SUMMARY"
          npm audit --production --audit-level=high || {
            echo "::warning::High severity vulnerabilities found in production dependencies"
            echo "⚠️ High severity vulnerabilities found in production dependencies" >> "$GITHUB_STEP_SUMMARY"
            npm audit --production --audit-level=high >> "$GITHUB_STEP_SUMMARY"
          }

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"

  # ============================================================
  # TESTS GROUP
  # ============================================================

  small-unit-test:
    name: Small Unit Tests
    needs:
      - guard-workflow
      - guard-api-key
      - guard-python-code-quality
      - guard-vulnerabilities
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.13"
          - "3.12"
          - "3.11"
    timeout-minutes: 3

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Run Unit Tests
        run: |
          # 通常のテスト実行 (カバレッジ有、ベンチマークなし)
          cmd_array=(
            poetry run pytest -n auto
            --cov=app.py
            --cov=features
            --cov=i18n
            --cov=scripts
            --cov-report=xml
            --cov-report=term
            --dist loadfile
            --durations=10
            --cache-clear
            --maxfail=5
            --verbose -k 'not e2e'
            --benchmark-disable
          )
          "${cmd_array[@]}"

  test-coverage:
    name: Coverage
    needs: small-unit-test
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            api.github.com:443
            cli.codecov.io:443
            codeclimate.com:443
            d3iz1jjs17r6kg.cloudfront.net:443
            files.pythonhosted.org:443
            github.com:443
            ingest.codecov.io:443
            keybase.io:443
            o26192.ingest.us.sentry.io:443
            pypi.org:443
            storage.googleapis.com:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Run pytest (coverage without e2e)
        shell: bash
        run: |
          cmd_array=(
            poetry run pytest
            --benchmark-disable
            --cov=app.py
            --cov=features
            --cov=i18n
            --cov=scripts
            --cov-report=xml
            --cov-report=term
            --dist loadfile
            --junitxml=junit.xml
            -n auto
            -k "not e2e"
            -o junit_family=legacy
          )
          "${cmd_array[@]}"

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@f2dba722c67b86c6caa034178c6e4d35335f6706 # v1.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5.4.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  test-e2e:
    name: E2E Tests (${{ matrix.os }} & ${{ matrix.browser }})
    needs: small-unit-test
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - windows-latest
        browser:
          - chromium
          - firefox
          - webkit
        exclude:
          # WindowsとWebkitの組み合わせを除外
          - os: windows-latest
            browser: webkit
      max-parallel: 10
    timeout-minutes: 15

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: false
          disable-file-monitoring: true
          allowed-endpoints: >+

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Run E2E Tests (Playwright)
        uses: ./.github/actions/test-python-playwright
        with:
          browser: ${{ matrix.browser }}

  pysa_scan:
    name: Scan code by pysa (SAST Tool)
    needs: small-unit-test
    permissions:
      contents: read
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Install Pysa
        run: |
          pipx inject poetry poetry-plugin-export
          poetry export -f requirements.txt --only=main --output requirements.txt
          pip install pyre-check
          pip install -r requirements.txt

      - name: Show Pyre info
        run: |
          pyre info
          pyre -h
          pyre analyze -h

      - name: Run Pysa
        run: |
          pyre --noninteractive --number-of-workers="$(nproc)" analyze --save-results-to ./
        continue-on-error: true

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: taint-output.json
          path: taint-output.json
          retention-days: 3
          compression-level: 9

  zap_scan:
    name: Scan HTTP by ZAP (DAST Tool)
    needs: small-unit-test
    permissions:
      contents: read
      issues: write
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            api.github.com:443
            cfu.zaproxy.org:443
            checkip.amazonaws.com:80
            content-signature-2.cdn.mozilla.net:443
            data.streamlit.io:443
            files.pythonhosted.org:443
            firefox-settings-attachments.cdn.mozilla.net:443
            firefox.settings.services.mozilla.com:443
            ghcr.io:443
            github.com:443
            news.zaproxy.org:443
            objects.githubusercontent.com:443
            pkg-containers.githubusercontent.com:443
            pypi.org:443
            r10.o.lencr.org:80
            r11.o.lencr.org:80
            raw.githubusercontent.com:443
            tel.zaproxy.org:443
            webhooks.fivetran.com:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Run Streamlit app in background
        run: |
          poetry run streamlit run app.py &
          # Wait a bit for the app to start
          sleep 10

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        continue-on-error: true
        with:
          fail_action: true
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:8501"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -d"

  # ============================================================
  # ANALYSIS GROUP
  # ============================================================

  # https://github.com/terryyin/lizard
  analysis-code-ccn:
    name: Code Complexity
    needs: small-unit-test
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443

      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python and restore cache
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.GLOBAL_PYTHON_VERSION }}

      - name: Run lizard (analyze CCN for production codes)
        run: |
          cmd_array=(
            poetry run lizard
            -x './node_modules/*'
            -x './.venv/*'
            -x './build/*'
            -x './dist/*'
            -x './htmlcov/*'
            -x './tests/*'
            --CCN "${LIZARD_CCN_COUNT}" # Quote variable expansion for safety
          )
          "${cmd_array[@]}"

      - name: Show AST (app.py)
        run: |
          python <<EOF
          import ast
          print(ast.dump(ast.parse(open("app.py").read()), indent=2))
          EOF

      - name: Show AST (features/*.py)
        run: |
          python <<EOF
          import ast
          import os
          import pprint
          target_dir = "./features"
          ast_trees = {}
          for file in os.listdir(target_dir):
              if file.endswith(".py"):
                  ast_trees[file] = ast.dump(ast.parse(open(os.path.join(target_dir, file)).read()), indent=2)
          pprint.pprint(ast_trees, width=100, compact=False)
          EOF

  # ============================================================
  # BUILD GROUP
  # ============================================================

  build-desktop:
    name: Build desktop app (${{ matrix.os }})
    needs: small-unit-test
    continue-on-error: ${{ matrix.os == 'windows-latest' }}
    permissions:
      contents: read
      security-events: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
    timeout-minutes: 15

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >+


      - name: Check out git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Node.js and cache
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.GLOBAL_NODE_VERSION }}

      - name: Build by stlite
        uses: ./.github/actions/build-stlite
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================
  # WORKFLOW SUMMARY
  # ============================================================

  workflow-summary:
    name: ${{ inputs.workflow_summary_name }}
    if: always()
    needs:
      - build-desktop
      - test-coverage
      - test-e2e
      - analysis-code-ccn
      - pysa_scan
      - zap_scan
    outputs:
      build_succeeded: ${{ steps.set-result.outputs.build_succeeded }}
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: ${{ env.HARDEN_RUNNER_EGRESS_POLICY }}
          disable-sudo: true
          disable-file-monitoring: true
          allowed-endpoints: >+

      - name: Show workflow summary
        id: set-result
        run: |
          {
            # 総合結果の表示
            echo ""
            echo "## 総合結果"

            # いずれかのジョブが失敗した場合に失敗とする
            if [[ "${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
              echo "⚠️ **一部のジョブが失敗しました。詳細を確認してください。**"
              echo "build_succeeded=false" >> "$GITHUB_OUTPUT"
            else
              echo "✅ **すべてのジョブが正常に完了しました**"
              echo "build_succeeded=true" >> "$GITHUB_OUTPUT"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

          # ワークフロー全体の結果を設定 - いずれかのジョブが失敗した場合に失敗とする
          if [[ "${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "Some jobs have failed. See the summary for details."
            exit 1
          fi
