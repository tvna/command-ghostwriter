name: Create PR to main

on:
  workflow_run:
    workflows: ["Test & Build"]
    types:
      - completed
    branches:
      - develop

jobs:
  create-pr:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'develop'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Check version change
        id: check-version
        run: |
          # package.json を変更した最新のコミットハッシュを取得
          latest_commit=$(git log -1 --pretty=format:"%H" -- package.json)

          if [ -z "$latest_commit" ]; then
            echo "package.json の変更が見つかりません"
            echo "version_changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 変更前のバージョンを取得
          old_version=$(git show "$latest_commit^:package.json" | jq -r '.version')

          # 現在のバージョンを取得
          current_version=$(jq -r '.version' package.json)

          if [ "$old_version" != "$current_version" ]; then
            echo "バージョンが $old_version から $current_version に変更されました"
            echo "version_changed=true" >> "$GITHUB_OUTPUT"
            echo "new_version=$current_version" >> "$GITHUB_OUTPUT"
          else
            echo "バージョンに変更はありません"
            echo "version_changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if PR already exists
        id: check-pr
        if: steps.check-version.outputs.version_changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_exists=$(gh pr list \
            --head develop \
            --base main \
            --state open \
            --json number \
            --jq length)
          echo "exists=$pr_exists" >> "$GITHUB_OUTPUT"

      # ラベルの存在確認と作成
      - name: Ensure labels exist
        if: |
          steps.check-version.outputs.version_changed == 'true' &&
          steps.check-pr.outputs.exists == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # リポジトリの既存ラベルを取得
          labels=$(gh label list --json name --jq '.[].name')

          # automated-pr ラベルがなければ作成
          if ! echo "$labels" | grep -q "automated-pr"; then
            echo "ラベル 'automated-pr' を作成します"
            gh label create "automated-pr" --description "自動生成されたPR" --color "0E8A16"
          fi

          # release ラベルがなければ作成
          if ! echo "$labels" | grep -q "release"; then
            echo "ラベル 'release' を作成します"
            gh label create "release" --description "自動リリース用PR" --color "1D76DB"
          fi

      - name: Create Pull Request
        if: |
          steps.check-version.outputs.version_changed == 'true' &&
          steps.check-pr.outputs.exists == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # develop ブランチから最新のコミットメッセージを取得
          commit_msg=$(git log -1 --pretty=%B)
          new_version="${{ steps.check-version.outputs.new_version }}"

          # PR タイトルを作成
          pr_title="Release v$new_version"

          # main ブランチにまだ取り込まれていないコミットの件名を取得
          # main ブランチをフェッチ
          git fetch origin main:main

          # コミット件名のリストを作成
          commit_titles=$(git log main..develop --pretty=format:"- %s")

          # PR 本文を作成
          pr_body="develop から main へのバージョン $new_version の自動 PR

          このPRは以下の理由で自動的に作成されました:
          1. develop ブランチ上ですべてのテストが合格
          2. パッケージバージョンが v$new_version に更新された

          コミットメッセージ:
          \`\`\`
          $commit_msg
          \`\`\`

          ## 変更概要
          このPRには、以下のコミットが含まれています:

          $commit_titles

          ## チェック項目
          - すべてのテストが合格
          - コード品質チェックが合格
          - バージョンが v$new_version に更新されました"

          # PRを作成
          gh pr create \
            --base main \
            --head develop \
            --title "$pr_title" \
            --body "$pr_body" \
            --label "automated-pr,release"
