name: Create PR to main

on:
  workflow_run:
    workflows: ["Test & Build"]
    types:
      - completed
    branches:
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  create-pr:
    runs-on: ubuntu-latest
    # 明示的にタイムアウトを設定
    timeout-minutes: 10
    # テスト成功時のみ実行
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'develop'
    # 必要最小限の権限のみを付与
    permissions:
      contents: read
      pull-requests: write
    steps:
      # デバッグログの強化
      - name: Dump GitHub context
        id: github_context_step
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT" | jq -r '. | {event_name, workflow_ref, repository, run_id, run_number}'

      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          # 明示的にトークンを渡す（セキュリティのため）
          token: ${{ secrets.GITHUB_TOKEN }}

      # Pythonのセットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install packaging gitpython semver

      - name: Check version change
        id: check-version
        run: |
          python scripts/check_version.py
        env:
          GITHUB_OUTPUT: ${{ env.GITHUB_OUTPUT }}

      - name: Check if PR already exists
        id: check-pr
        if: steps.check-version.outputs.version_changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "::notice::既存のPRを確認中..."
          if ! pr_exists=$(gh pr list \
            --head develop \
            --base main \
            --state open \
            --json number \
            --jq length); then
            echo "::error::PRの一覧取得に失敗しました"
            {
              echo "exists=error"
            } >> "$GITHUB_OUTPUT"
            exit 1
          fi

          echo "::notice::既存のオープンPR: $pr_exists"
          {
            echo "exists=$pr_exists"
          } >> "$GITHUB_OUTPUT"

      # ラベルの存在確認と作成
      - name: Ensure labels exist
        id: ensure-labels
        if: |
          steps.check-version.outputs.version_changed == 'true' &&
          steps.check-pr.outputs.exists == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          echo "::notice::ラベルの確認中..."

          # リポジトリの既存ラベルを取得
          if ! labels=$(gh label list --json name --jq '.[].name'); then
            echo "::warning::ラベル一覧の取得に失敗しました"
            # 続行可能なエラーなので失敗としない
          fi

          # automated-pr ラベルがなければ作成
          if ! echo "$labels" | grep -q "automated-pr"; then
            echo "::notice::ラベル 'automated-pr' を作成します"
            if ! gh label create "automated-pr" --description "自動生成されたPR" --color "0E8A16"; then
              echo "::warning::ラベル 'automated-pr' の作成に失敗しました"
            else
              {
                echo "automated_pr_created=true"
              } >> "$GITHUB_OUTPUT"
            fi
          else
            {
              echo "automated_pr_exists=true"
            } >> "$GITHUB_OUTPUT"
          fi

          # release ラベルがなければ作成
          if ! echo "$labels" | grep -q "release"; then
            echo "::notice::ラベル 'release' を作成します"
            if ! gh label create "release" --description "自動リリース用PR" --color "1D76DB"; then
              echo "::warning::ラベル 'release' の作成に失敗しました"
            else
              {
                echo "release_created=true"
              } >> "$GITHUB_OUTPUT"
            fi
          else
            {
              echo "release_exists=true"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        id: create-pr
        if: |
          steps.check-version.outputs.version_changed == 'true' &&
          steps.check-pr.outputs.exists == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.check-version.outputs.new_version }}
          OLD_VERSION: ${{ steps.check-version.outputs.old_version }}
          GITHUB_OUTPUT: ${{ env.GITHUB_OUTPUT }}
        run: |
          python scripts/create_pr.py

      # 結果の通知
      - name: Notify result
        if: always()
        run: |
          if [[ "${{ steps.create-pr.outcome }}" == "success" && "${{ steps.create-pr.outputs.pr_url }}" != "" ]]; then
            echo "::notice::PR作成成功: ${{ steps.create-pr.outputs.pr_url }}"
          elif [[ "${{ steps.check-version.outputs.version_changed }}" == "false" ]]; then
            if [[ "${{ steps.check-version.outputs.reason }}" == "lockfile_not_updated" || \
                  "${{ steps.check-version.outputs.reason }}" == "version_mismatch" || \
                  "${{ steps.check-version.outputs.reason }}" == "lockfile_outdated" ]]; then
              echo "::error::package-lock.json の更新が必要です"
            elif [[ "${{ steps.check-version.outputs.reason }}" == "version_not_newer" ]]; then
              echo "::error::既存タグ ${{ steps.check-version.outputs.latest_tag }} (バージョン: ${{ steps.check-version.outputs.latest_tag_version }}) と同じかそれより古いバージョンです。より新しいバージョンが必要です。"
            elif [[ "${{ steps.check-version.outputs.reason }}" == "no_version_change" ]]; then
              echo "::notice::バージョン変更なし - PRは作成されませんでした"
            else
              echo "::notice::理由: ${{ steps.check-version.outputs.reason }} - PRは作成されませんでした"
            fi
          elif [[ "${{ steps.check-pr.outputs.exists }}" != "0" ]]; then
            echo "::notice::既存のPRが見つかりました - 新規PRは作成されませんでした"
          else
            echo "::warning::PRの作成に問題が発生しました - ワークフロー実行詳細を確認してください"
          fi
