name: Create PR to main

on:
  workflow_run:
    workflows: ["Test & Build"]
    types:
      - completed
    branches:
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  create-pr:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.13
    timeout-minutes: 10
    # テスト成功時のみ実行
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'develop'
    # 必要最小限の権限のみを付与
    permissions:
      contents: read
      pull-requests: write
    steps:
      # デバッグログの強化
      - name: Dump GitHub context
        id: github_context_step
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT" | jq -r '. | {event_name, workflow_ref, repository, run_id, run_number}'

      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install packaging gitpython semver mock pytest pytest-cov

      - name: Check version change
        id: check-version
        run: |
          python .github/scripts/check_version.py
        env:
          GITHUB_OUTPUT: ${{ env.GITHUB_OUTPUT }}

      - name: Check if PR already exists
        id: check-pr
        if: steps.check-version.outputs.version_changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "::notice::既存のPRを確認中..."
          pr_exists=$(gh pr list --head develop --base main --state open --json number --jq length) || {
            echo "::error::PRの一覧取得に失敗しました"
            echo "exists=error" >> "$GITHUB_OUTPUT"
            exit 1
          }

          echo "::notice::既存のオープンPR: $pr_exists"
          echo "exists=$pr_exists" >> "$GITHUB_OUTPUT"

      - name: Ensure labels exist
        id: ensure-labels
        if: steps.check-pr.outputs.exists == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          echo "::notice::ラベルの確認中..."
          labels=$(gh label list --json name --jq '.[].name') || {
            echo "::warning::ラベル一覧の取得に失敗しました"
          }

          # automated-pr ラベルの確認と作成
          if ! echo "$labels" | grep -q "automated-pr"; then
            echo "::notice::ラベル 'automated-pr' を作成します"
            if ! gh label create "automated-pr" --description "自動生成されたPR" --color "0E8A16"; then
              echo "::warning::ラベル 'automated-pr' の作成に失敗しました"
            fi
          fi

          # release ラベルの確認と作成
          if ! echo "$labels" | grep -q "release"; then
            echo "::notice::ラベル 'release' を作成します"
            if ! gh label create "release" --description "自動リリース用PR" --color "1D76DB"; then
              echo "::warning::ラベル 'release' の作成に失敗しました"
            fi
          fi

      - name: Create Pull Request
        id: create-pr
        if: steps.check-version.outputs.version_changed == 'true' && steps.check-pr.outputs.status == 'success'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.check-version.outputs.new_version }}
          OLD_VERSION: ${{ steps.check-version.outputs.old_version }}
          GITHUB_OUTPUT: ${{ env.GITHUB_OUTPUT }}
        run: |
          python .github/scripts/create_pr.py

      # 結果の通知
      - name: Notify PR creation success
        id: notify-success
        if: steps.create-pr.outcome == 'success' && steps.create-pr.outputs.pr_url != ''
        run: |
          echo "::notice::PR作成成功: ${{ steps.create-pr.outputs.pr_url }}"

      - name: Notify version change issues
        id: notify-version-issues
        if: steps.check-version.outputs.version_changed == 'false'
        run: |
          case "${{ steps.check-version.outputs.reason }}" in
            lockfile_not_updated|version_mismatch|lockfile_outdated)
              echo "::error::package-lock.json の更新が必要です"
              ;;
            version_not_newer)
              echo "::error::既存タグ ${{ steps.check-version.outputs.latest_tag }} (バージョン: ${{ steps.check-version.outputs.latest_tag_version }}) と同じかそれより古いバージョンです。より新しいバージョンが必要です。"
              ;;
            no_version_change)
              echo "::notice::バージョン変更なし - PRは作成されませんでした"
              ;;
            *)
              echo "::notice::理由: ${{ steps.check-version.outputs.reason }} - PRは作成されませんでした"
              ;;
          esac

      - name: Notify existing PR
        id: notify-existing-pr
        if: steps.check-pr.outputs.exists != '0'
        run: |
          echo "::notice::既存のPRが見つかりました - 新規PRは作成されませんでした"

      - name: Notify general issues
        if: always()
        run: |
          echo "::warning::PRの作成に問題が発生しました - ワークフロー実行詳細を確認してください"
