name: Create PR to main

on:
  workflow_run:
    workflows: ["Test & Build"]
    types:
      - completed
    branches:
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  get-npm-version-from-main:
    outputs:
      version: ${{ steps.package-version-from-main.outputs.current-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: true

      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Get version from main
        id: package-version-from-main
        uses: step-security/npm-get-version-action@v1

      - run: |
          echo "The current version is '${{ steps.package-version-from-main.outputs.current-version }}'."
          echo "version='${{ steps.package-version-from-main.outputs.current-version }}'" >> "$GITHUB_OUTPUT"

  get-npm-version-from-develop:
    outputs:
      version: ${{ steps.package-version-from-develop.outputs.current-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: true

      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Get version from develop
        id: package-version-from-develop
        uses: step-security/npm-get-version-action@v1

      - name: Display the version
        run: |
          echo "The current version is '${{ steps.package-version-from-develop.outputs.current-version }}'."
          echo "version='${{ steps.package-version-from-develop.outputs.current-version }}'" >> "$GITHUB_OUTPUT"

  create-pr-to-main:
    needs:
      - get-npm-version-from-main
      - get-npm-version-from-develop
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: true
          disable-file-monitoring: false

      - name: Dump GitHub context
        id: github_context_step
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT" | jq -r '. | {event_name, workflow_ref, repository, run_id, run_number}'

      - name: Compare versions (Semver)
        uses: step-security/semver-utils@v4
        id: compare-versions
        with:
          version: ${{ needs.get-npm-version-from-develop.outputs.version }}
          compare-to: ${{ needs.get-npm-version-from-main.outputs.version }}
          satisfies: 1.x

      - name: Display version information
        run: |
          echo "${{ steps.compare-versions.outputs.release }}"
          echo "${{ steps.compare-versions.outputs.major }}"
          echo "${{ steps.compare-versions.outputs.minor }}"
          echo "${{ steps.compare-versions.outputs.patch }}"
          echo "${{ steps.compare-versions.outputs.build }}"
          echo "${{ steps.compare-versions.outputs.build-parts }}"
          echo "${{ steps.compare-versions.outputs.comparison-result }}"
          echo "${{ steps.compare-versions.outputs.satisfies }}"
          echo "${{ steps.compare-versions.outputs.inc-major }}"
          echo "${{ steps.compare-versions.outputs.inc-premajor }}"
          echo "${{ steps.compare-versions.outputs.inc-minor }}"
          echo "${{ steps.compare-versions.outputs.inc-preminor }}"
          echo "${{ steps.compare-versions.outputs.inc-patch }}"
          echo "${{ steps.compare-versions.outputs.inc-prepatch }}"
          echo "${{ steps.compare-versions.outputs.inc-prerelease }}"

      - name: Check if PR already exists
        id: check-pr
        if: |
          steps.compare-versions.outputs.comparison-result == '<'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "::notice::既存のPRを確認中..."
          pr_exists=$(gh pr list --head develop --base main --state open --json number --jq length) || {
            echo "::error::PRの一覧取得に失敗しました"
            echo "exists=error" >> "$GITHUB_OUTPUT"
            exit 1
          }

          echo "::notice::既存のオープンPR: $pr_exists"
          echo "exists=$pr_exists" >> "$GITHUB_OUTPUT"

      - name: Ensure labels exist
        id: ensure-labels
        if: steps.check-pr.outputs.exists == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          echo "::notice::ラベルの確認中..."
          labels=$(gh label list --json name --jq '.[].name') || {
            echo "::warning::ラベル一覧の取得に失敗しました"
          }

          # automated-pr ラベルの確認と作成
          if ! echo "$labels" | grep -q "automated-pr"; then
            echo "::notice::ラベル 'automated-pr' を作成します"
            if ! gh label create "automated-pr" --description "自動生成されたPR" --color "0E8A16"; then
              echo "::warning::ラベル 'automated-pr' の作成に失敗しました"
            fi
          fi

          # release ラベルの確認と作成
          if ! echo "$labels" | grep -q "release"; then
            echo "::notice::ラベル 'release' を作成します"
            if ! gh label create "release" --description "自動リリース用PR" --color "1D76DB"; then
              echo "::warning::ラベル 'release' の作成に失敗しました"
            fi
          fi

      - name: Create Pull Request
        id: create-pr
        if: |
          steps.compare-versions.outputs.comparison-result == '<'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ needs.get-npm-version-from-main.outputs.version }}
          OLD_VERSION: ${{ needs.get-npm-version-from-develop.outputs.version }}
          GITHUB_OUTPUT: ${{ env.GITHUB_OUTPUT }}
        run: |
          python scripts/create_pr.py

      # 結果の通知
      - name: Notify PR creation success
        id: notify-success
        if: steps.create-pr.outcome == 'success' && steps.create-pr.outputs.pr_url != ''
        run: |
          echo "::notice::PR作成成功: ${{ steps.create-pr.outputs.pr_url }}"

      - name: Notify existing PR
        id: notify-existing-pr
        if: steps.check-pr.outputs.exists != '0'
        run: |
          echo "::notice::既存のPRが見つかりました - 新規PRは作成されませんでした"
