name: Test & Build
on:
  push:
    branches:
      - develop
    paths-ignore:
      - .devcontainer
      - README.md
      - command_ghostwriter.code-workspace
  pull_request:
    branches:
      - develop
defaults:
  run:
    shell: bash
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    name: Run unittest web-app
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.12
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash
      - name: Configure poetry
        run: poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install
      - name: Run mypy
        run: |
          poetry run mypy . --exclude build
      - name: Run pytest
        run: |
          poetry run pytest --cov . --cov-report=xml
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: |
            coverage.xml
            .coverage
            htmlcov
  e2e_test:
    name: Run E2E-test web-app
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        python-version:
          - 3.12
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Restore cache playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-pytest-playwright-${{ hashFiles('**/poetry.lock') }}
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash
      - name: Configure poetry
        run: poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install
      - name: Install Playwright Browsers
        run: |
          poetry run playwright install
      - name: Start Streamlit app
        run: |
          nohup poetry run streamlit run app.py &
          sleep 5
      - name: Check if Streamlit app is running
        run: |
          curl -f http://localhost:8501 || exit 1
  analyze_ccn:
    # https://github.com/terryyin/lizard
    name: Analyze CCN number
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        python-version:
          - 3.12
    permissions:
      contents: read
    env:
      LIZARD_CCN_COUNT: 10
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash
      - name: Configure poetry
        run: poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install
      - name: Run lizard (analize CCN)
        run: |
          poetry run lizard -x "./node_modules/*" -x "./.venv/*" -x "./build/*" -x "./dist/*" -x "./htmlcov/*" --CCN ${LIZARD_CCN_COUNT}
  security:
    # https://bandit.readthedocs.io/en/latest/index.html
    name: Run security linter
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        python-version:
          - 3.12
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash
      - name: Configure poetry
        run: poetry config virtualenvs.in-project false
        shell: bash
      - name: Install dependencies
        shell: bash
        run: |
          poetry install
      - name: Run mypy
        run: |
          poetry run bandit -c pyproject.toml -r .
  add_requirements:
    # https://python-poetry.org/docs/cli/#export
    runs-on: ubuntu-latest
    needs:
      - test
    if: 0 != 0
    permissions:
      contents: write
    env:
      REQUIREMENTS_TXT: $GITHUB_WORKSPACE/requirements.txt
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y
        shell: bash
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Create a new file
        run: |
          poetry export -f requirements.txt -o "${REQUIREMENTS_TXT}" --without-hashes -v
          echo "# dummy change" >> ${REQUIREMENTS_TXT}
          cat ${REQUIREMENTS_TXT}
      - name: Configure Git
        run: |
          git config --global user.name "${{ secrets.GIT_CONFIG_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_CONFIG_EMAIL }}"
      - name: Commit and push changes
        run: |
          git add ${REQUIREMENTS_TXT}
          git commit -m "Add requirements.txt"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements-txt
          path: |
            ${REQUIREMENTS_TXT}
  coverage:
    name: Upload coverage
    runs-on: ubuntu-latest
    needs:
      - test
    permissions:
      contents: read
    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TEST_REPORTER_ID }}
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Download code coverage results
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.4.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Setup Code Climate
        uses: remarkablemark/setup-codeclimate@v2
      - name: Run Test and Upload Coverage
        run: |
          cc-test-reporter before-build
          # insert your test command here
          cc-test-reporter after-build --exit-code $?
  build:
    name: Build desktop-app
    runs-on: ${{ matrix.os }}
    needs:
      - e2e_test
      - security
      - analyze_ccn
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Restore cache node-electron dependecies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-electron-${{ hashFiles('**/package-lock.json') }}
      - name: Install stlite
        run: |
          npm install
      - name: Dump package
        run: |
          npm run dump
      - name: Build
        run: |
          npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build-artifact
          path: ./dist
