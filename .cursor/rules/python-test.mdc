---
description: Testing rules for python
globs: *.py
alwaysApply: false
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Python Style Checker

## 概要
Pythonファイルのテストコードをチェックするルールです

## 対象ファイル
- **/*.py

## ルール

### テストコードの基本ルール
- テストコードも製品コードと同じスタイルを適用すること
- 理由ではなく、動作を説明するコメントを排除すること
- RUF003のエラーが発生しないように、コメントの記述には徹底的に配慮すること

### pytestの使用チェック
- テストファイル内で`import pytest`がない場合、警告を出します

### テストパターンの選択
- ドメイン知識ルールにて指定がない限り、Arrange-Act-Assertパターンに従ってテストを用意すること
- ドメイン知識にてAPIとして提供する製品コードにおいては、Given-When-Thenパターンに従ってテストを用意すること
- ドメイン知識にてデータベースの制御を記載している製品コードにおいては、Setup-Exercise-Verify-Teardownパターンに従ってテストを用意すること

### テストコードの保守性
- 各テストは一つの概念だけを検証すること
- テスト名は検証する内容を明確に表すこと
- テストが失敗した時に原因を特定しやすいよう、明確なアサーションメッセージを使用すること
- 複雑なテストロジックはヘルパー関数に分離すること
- テスト間で状態を共有しないこと
- テスト実行順序に依存しない設計にすること

### テストコードのセットアップ
- `@pytest.fixture`を使用して共通処理のセットアップにより、重複を減らすこと

### パラメーター化テストの活用
- 条件分岐を減らし、パラメータ化テストで代替すること
- パラメーター化テストは、`@pytest.mark.parametrize`を使うこと
- `@pytest.mark.parametrize`の第1引数は必ずTupleで定義すること
- `@pytest.mark.parametrize`のargvaluesは、`pytest.param`を使うこと
- `pytest.param`の`id`を使い、テストの目的を詳細に記載すること

### モックの適切な使用
- 外部依存（ファイルシステム、ネットワークなど）はモックすること
- モックのモジュールは、`pytest_mock import MockerFixture`を利用すること
- モックの検証は具体的な呼び出し回数や引数を確認すること
- サイドエフェクトを持つ関数は適切にモックすること
- テストコードでも`Any`型の使用は避け、より具体的な型（`Union`など）を使用すること
- モックオブジェクトには`Mock`や`MagicMock`などの具体的な型を指定すること

### エッジケースのテスト
- 正常系だけでなく異常系もテストすること
- 境界値や特殊なケース（空文字列、Noneなど）もテストすること
- 例外が発生するケースもテストすること

### テストの高速化
- 並列実行により高速にテストが完了できる仕様を意識すること