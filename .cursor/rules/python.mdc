---
description: Rules for python
globs: *.py
alwaysApply: false
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Python Style Checker

## 概要
Pythonファイルのスタイル規約をチェックします。

## 対象ファイル
- **/*.py

## ルール

### 行の長さチェック
- 行が140文字を超えている場合、警告を出します。

### トレーリングホワイトスペースのチェック
- 行にトレーリングホワイトスペースがある場合、警告を出します。

### pytestの使用チェック
- テストファイル内で`import pytest`がない場合、警告を出します。

### parametrizeの使用チェック
- テストコードが`@pytest.mark.parametrize`を使用していない場合、警告を出します。

### 型ヒントのチェック
- テスト関数に型ヒント（`->`）が含まれていない場合、警告を出します。

### Pydanticの使用チェック
- ルートおよびfeaturesフォルダ内のファイルで`from pydantic`がない場合、警告を出します。

### セキュリティリスクのチェック
- `eval(`, `exec(`, `os.system(`, `os.popen(`, `os.exec*`, `subprocess.call(`, `subprocess.Popen(`の使用がある場合、警告を出します（`subprocess`を除く）。

### クラス化のチェック
- featuresフォルダ内のファイルがクラス化されていない場合、警告を出します。

### インポートの順序
- インポートは、標準ライブラリ、サードパーティライブラリ、ローカルライブラリの順に並べるべきです。各グループの間には空行を入れることを推奨します。

### ドキュメンテーションストリング
- 各関数やクラスには、適切なドキュメンテーションストリング（docstring）を含めるべきです。これにより、コードの意図や使用方法が明確になります。

### 型ヒントの使用
- すべての関数には、引数と戻り値に対して型ヒントを使用するべきです。これにより、コードの可読性と保守性が向上します。

### 不要なコードの削除
- 使用されていない変数や関数、コメントアウトされたコードは削除するべきです。これにより、コードがクリーンで理解しやすくなります。

### 一貫したインデント
- インデントはスペース4つを使用するべきです。タブとスペースを混在させないように注意します。

### 例外処理
- 例外処理を適切に行い、エラーメッセージを明確にするべきです。特に、ユーザーにとって理解しやすいメッセージを提供することが重要です。