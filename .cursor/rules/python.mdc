---
description: Rules for python
globs: *.py
alwaysApply: false
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Python Style Checker

## 概要
Pythonファイルのスタイル規約をチェックします。

## 対象ファイル
- **/*.py

## ルール

### フォーマッターによる構文チェック
- 行が140文字を超えている場合、警告を出します。
- 行にトレーリングホワイトスペースがある場合、警告を出します。
- インデントはスペース4つを使用するべきです。タブとスペースを混在させないように注意します。
- インポートは、標準ライブラリ、サードパーティライブラリ、ローカルライブラリの順に並べるべきです。各グループの間には空行を入れることを推奨します。

### 不要なコードの削除
- 使用されていない変数や関数、コメントアウトされたコードは削除するべきです。これにより、コードがクリーンで理解しやすくなります。

### 変数と関数の明確な命名
- 変数や関数の名前は、その目的や役割を明確に表すこと
- 略語は一般的に知られているもの以外は避けること
- ブール値を返す関数や変数は、is_, has_, can_などの接頭辞を使用すること

### 命名の一貫性
- クラス名はPascalCase（MyClass）
- 関数名と変数名はsnake_case（my_function）
- 定数はALL_CAPS（MAX_SIZE）
- プライベートメンバーには先頭にアンダースコア（_private_method）

### コメントの目的
- コードが「何をしているか」ではなく「なぜそうしているか」を説明すること
- 複雑なロジックや非直感的な解決策には必ずコメントを付けること
- TODOコメントには、何が必要か、なぜ必要かを明記すること

### ドキュメンテーション
- 公開APIには必ずdocstringを書くこと
- docstringは引数、戻り値、例外、使用例を含めること
- モジュールレベルのdocstringでは、そのモジュールの目的と使用方法を説明すること

### コードの構造の関数設計
- 関数は一つのことだけを行うこと（単一責任の原則）
- 関数の長さは画面に収まる程度（20-30行以内）に抑えること
- 引数の数は少なく保つこと（理想は2-3個まで）

### コード構造の制御フロー
- ネストは浅く保つこと（理想は2-3レベルまで）
- 早期リターンを活用して、ネストを減らすこと
- 複雑な条件式は、説明的な変数名を持つ中間変数に分解すること

### コード構造のエラー処理
- 例外は具体的なものを使い、適切な粒度で捕捉すること
- エラーメッセージは具体的で、問題解決に役立つ情報を含めること
- 「沈黙の失敗」を避け、エラーは明示的に処理すること

### 型ヒントの使用とチェック
- すべての関数には、引数と戻り値に対して型ヒントを使用するべきです。これにより、コードの可読性と保守性が向上します。
- テスト関数に型ヒント（`->`）が含まれていない場合、警告を出します。
- ルートおよびfeaturesフォルダ内のファイルで`from pydantic`がない場合、警告を出します。

### セキュリティリスクのチェック
- `eval(`, `exec(`, `os.system(`, `os.popen(`, `os.exec*`, `subprocess.call(`, `subprocess.Popen(`の使用がある場合、警告を出します（`subprocess`を除く）。

### クラス化のチェック
- featuresフォルダ内のファイルがクラス化されていない場合、警告を出します。

### pytestの使用チェック
- テストファイル内で`import pytest`がない場合、警告を出します。

### parametrizeの使用チェックとargvalues型チェック
- テストコードが`@pytest.mark.parametrize`を使用していない場合、警告を出します。
- parametrizeのargvaluesは、`pytest.param`を使うこと

### テストコードの構造化
- 各テストは一つの概念だけを検証すること
- テスト名は検証する内容を明確に表すこと
- Arrange-Act-Assertパターンに従ってテストを構造化すること
- 条件分岐を減らし、パラメータ化テストで代替すること
- 複雑なテストロジックはヘルパー関数に分離すること

### テストの保守性
- テストコードも製品コードと同じ品質基準を適用すること
- テストフィクスチャやヘルパー関数を活用して重複を減らすこと
- テストが失敗した時に原因を特定しやすいよう、明確なアサーションメッセージを使用すること

### モックの適切な使用
- 外部依存（ファイルシステム、ネットワークなど）はモックすること
- モックの検証は具体的な呼び出し回数や引数を確認すること
- サイドエフェクトを持つ関数は適切にモックすること

### Any型の使用制限
- テストコードでも`Any`型の使用は避け、より具体的な型（`Union`など）を使用すること
- モックオブジェクトには`Mock`や`MagicMock`などの具体的な型を指定すること

### テストの独立性
- テスト間で状態を共有しないこと
- フィクスチャを使用して共通のセットアップを行うこと
- テスト実行順序に依存しない設計にすること

### エッジケースのテスト
- 正常系だけでなく異常系もテストすること
- 境界値や特殊なケース（空文字列、Noneなど）もテストすること
- 例外が発生するケースもテストすること




