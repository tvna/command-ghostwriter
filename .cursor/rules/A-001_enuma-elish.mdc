---
description: Directory pattern for this repo
globs: *
alwaysApply: true
---
# はじめに (Enûma Eliš)

## 用語の定義
- 製品コードとは、将来的にリリースされるビジネスロジックを提供するコードである
- 実装とは、製品コードを記述するコードである
- 期待とは、テストにおける実装が応答すべき値や挙動、状態変化を検証するコードである

## ディレクトリとファイルの配置規則
このプロジェクトのインプット、アウトプットは次のディレクトリ構造に従い格納する

```
./                  # アプリ本体
assets/             # 製品コードの実装に組み込む画像やテキストファイル
docs/               # 製品コードの実装に組み込まない、ドキュメント置き場(例：手順書)
features/           # 製品コードの付属モジュール
scripts/            # ワークフローの制御用コード
tests/              # テスト自動化、インテグレーションテスト(結合テスト)
tests/unit          # テスト自動化、ユニットテスト(単体テスト)
tests/e2e           # テスト自動化、E2Eテスト
tests/workflow      # ワークフローの制御用コードのテスト自動化
.cursor/rules       # Rules for AI (Cursor)
.github/actions     # Github Actions コンポジットアクション
.github/workflows   # Github Actions ワークフロー
.benchmarks         # ベンチマーク結果
```

## AIエージェントのルール配置
- ルールは責任の所在明確であり、MECEであることを前提としている
- ルールの優先度は、ファイル名のソート(ASC)における先に来るものを優先度：高、後に来るものを優先度：低とする
- 5W2Hが明確でなく判断できない場合、勝手に判断せずにプロンプトにて質問すべきである
- ${RULENAME}はkebab-caseにて定義すること

### A. グローバルルール
- PATH:`.cursor/rules/A-[0-9]{2,4}_${RULENAME}.mdc`
- プロジェクトの初期化や構造を記述する

### B. ドメイン知識
- PATH:`.cursor/rules/B-[0-9]{2,4}_${RULENAME}.mdc`
- プロジェクトが達成すべき要求事項、ドメイン知識の仕様と制約を記述する
- プログラミングに関する方針は技術選定のスコープであり、ドメイン知識として記述する

### C. プログラミング知識
- PATH:`.cursor/rules/C-[0-9]{2,4}_${RULENAME}.mdc`
- プログラミングに関する仕様、制約を記述する

### D. CI/CD知識
- PATH:`.cursor/rules/D-[0-9]{2,4}_${RULENAME}.mdc`
- 自動テストと自動リリースを実現するためのワークフローに関する仕様と制約を記述する


