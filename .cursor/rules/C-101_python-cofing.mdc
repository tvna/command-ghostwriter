---
description:
globs: *.py
alwaysApply: false
---
# Pythonのコーディングの基本

## 型ヒント利用の強制
- すべての関数には、引数と戻り値に対して型ヒントを使用するべきです。これにより、コードの可読性と保守性が向上します。
- テスト関数に型ヒント（`->`）が含まれていない場合、修正を実施すること

## 変数と関数の明確な命名
- 変数や関数の名前は、その目的や役割を明確に表すこと
- 一度も変更が発生すべきでない変数は、全て定数として扱います。
- 略語は一般的に知られているもの以外は避けること
- ブール値を返す関数や変数は、is_, has_, can_などの接頭辞を使用すること

## 命名の一貫性
- クラス名はPascalCase（MyClass）
- 関数名と変数名はsnake_case（my_function）
- 定数はALL_CAPS（MAX_SIZE）
- プライベートメンバーには先頭にアンダースコア（_private_method）

## コードの構造と関数設計
- 関数は単一責務となるように、一つのことだけ行うことを優先すること
- 同一ファイル内で責任範囲が重複するメソッドやクラスが存在する場合、ひとつに集約すること
- 関数の長さは画面に収まる程度（20-30行以内）に抑えること
- 引数の数は少なく保つこと（理想は2-3個まで）

## 引数のバリデーション（検証）
- 製品コードのファイルにおいては、`from pydantic`を利用して型バリデーションを行います
- バリデーションにあたり、dataclassなどのpydantic以外のパッケージの利用を禁止します
- pydanticの記述はV2に準拠するものとします
- コード中のif分岐や正規表現よりも、pydanticのメソッドによるバリデーションを優先して使うこと
- バリデーションは引数に対して単一責務であること
- クラス変数の初期値はAnnotated関数を使い、検査タイミングを適切に設定すること
- 定数は、ClassVarで定義すること
- 特殊な変数のバリデーションは、field_validatorのデコレーターを適応すること
- 任意の引数のデフォルト値を明記して、暗黙的な型変換を防ぐこと
- 静的解析のバリデーションとランタイムのバリデーションは明確に分けて実装すること
- 全てのバリデーションは、静的解析のみ、ランタイムのみ、両方で検査すべきかを吟味し、適切な方法を選択して実装すること
- 脆弱性が出ないように、バリデーションする順番を適切に選定すること

## コード構造の制御フロー
- ネストは浅く保つこと（理想は2-3レベルまで）
- 早期リターンを活用して、ネストを減らすこと
- 複雑な条件式は、説明的な変数名を持つ中間変数に分解すること

## コード構造のエラー処理
- 例外は具体的な名前と意味を持たせること
- エラーメッセージは具体的で、問題解決に役立つ情報を含めること
- 「沈黙の失敗」を避け、エラーは明示的に処理すること
- データ変換を伴う場合、オーバーフローを考慮すること
- エラーハンドリングにの一貫性を確保すること

## 既存コードに対する変更の適応
- 解決不能な修正を3回以上繰り返した場合、次に続くルールを全て適応すること

### 思考の前処理
- 変更を適応する前に、課題を洗い出すこと
- 全体に渡り、構造的な問題がないか検証すること
- 各クラスや各関数の責任の所在の分離を徹底すること

### 思考の後処理
- 責任の所在は、ドキュメンテーションに反映すること
- 変更すべき箇所は、ドキュメンテーションにTODOコメントを残すこと
- TODOコメント部分の変更にあたり、各種基本ルールを適応すること
- 全ての変更が終わったら、テストコードを実行すること
- 全てのテストコードが成功するまで、TODOコメントを残しておくこと
