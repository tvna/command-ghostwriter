---
description:
globs: tests/*.py
alwaysApply: false
---
# Pythonのテストコードの基本
- テストコードも製品コードと同じスタイルを適用すること
- 理由ではなく、動作を説明するコメントを排除すること
- テストは`pytest`を前提として実装します
- テストコードに関するファイルは、ディレクトリ配置規則に従い、テストコード用のフォルダ配下にのみ格納すること

## クラスに対するテストコードの配置ルール
- このルールは、他のルールよりも最優先で実施すること
- トークン枯渇に備えて、単独ファイルでのテストコードの肥大化に対処する必要があります
- クラスに対するテストコードは、クラスメソッド単位でテストコードを用意すること。

## テストコードの設計
- 各テストは一つの概念だけを検証すること
- 複雑なテストロジックはヘルパー関数に分離すること
- テスト間で状態を共有しないこと
- テスト実行順序に依存しない設計にすること

## テストパターンの選択
- ドメイン知識ルールにて指定がない限り、Arrange-Act-Assertパターンに従ってテストを用意すること
- ドメイン知識にてデータベースの制御を記載している製品コードにおいては、Setup-Exercise-Verify-Teardownパターンに従ってテストを用意すること

## テストコードの保守性
- テスト名は検証する内容を明確に表すこと
- テストが失敗した時に原因を特定しやすいよう、明確なアサーションメッセージを使用すること
- 長い文字列でテストのパラメーターを用意する場合は、140文字以内に収まるように分割すること
- 全てのassertには英語のエラーメッセージを挿入すること

## テストコードのセットアップ
- `@pytest.fixture`を使用して共通処理のセットアップにより、重複を減らすこと

## パラメーター化テストの活用
- 条件分岐を減らし、パラメータ化テストで代替すること
- パラメーター化テストは、`@pytest.mark.parametrize`を使うこと
- `@pytest.mark.parametrize`の第1引数は必ずTupleで定義すること
- `@pytest.mark.parametrize`のargvaluesは、`pytest.param`を使うこと
- `pytest.param`の`id`を使い、テストの目的を詳細に記載すること
- パラメーター化において、テストの目的をコメントに記載しないこと

### パラメーター化のidの規則
- 命名規則: スネークケースを使用/単語はアンダースコアで区切る/略語は大文字で記述
- 命名の構造: "{機能}_{状態}_{条件}"
- 機能: テスト対象の機能名
- 状態: Valid/Invalid、Success/Failedなどの結果状態
- 条件: 具体的なテスト条件（オプション）
- 全て英語で記述
- 略語は一般的なもののみ使用（CSV、JSON、UTF8など）
- 状態を表す形容詞は先頭に配置（Valid/Invalid、Empty、Basicなど）

## モックの適切な使用
- 外部依存（ファイルシステム、ネットワークなど）はモックすること
- モックのモジュールは、`pytest_mock import MockerFixture`を利用すること
- モックの検証は具体的な呼び出し回数や引数を確認すること
- サイドエフェクトを持つ関数は適切にモックすること
- テストコードでも`Any`型の使用は避け、より具体的な型（`Union`など）を使用すること
- モックオブジェクトには`Mock`や`MagicMock`などの具体的な型を指定すること

## エッジケースのテスト
- 正常系だけでなく異常系もテストすること
- 境界値や特殊なケース（空文字列、Noneなど）もテストすること
- 例外が発生するケースもテストすること

## テストの高速化
- 並列実行により高速にテストが完了できる仕様を意識すること

## セキュリティ対策におけるテストの追加
- セキュリティ対策でテストコードを追加する場合のルールを列挙します
- 製品コードとテストコードの比較を行い、問題点を先に洗い出すこと
- 製品コードの変更にあたっては、テストコードが安全性の面で常に正しく動作するテストを優先すること
- テストコードの変更にあたり、脆弱性がない限り、既存のテスト結果に変更が出ないようにすること