---
description:
globs: .github/*
alwaysApply: false
---
# Github Actionsの基本ルール

## ワークフローの基本記述

### スクリプトの技術選定
- ワークフロー固有のスクリプトは、全てGithub scriptによって記述すること

### APIキーやパスワードの受け渡し方法
- APIキーやパスワードは、yamlファイルへのハードコーディングを絶対に実施しないこと
- GitHub Secretsを使用した環境変数の受け渡しにより、安全に管理すること

---

## ワークフローの構造

### CIの基本フロー
- 失敗通知を大量に送信することがないよう、基本構造は次のフローを意識すること
- 1. ガード節
- 2. スモールサイズテスト
- 3. ミドルサイズテスト、ビルド
- 後続に依存するワークフローがある場合は、最後にサマリを表示すること

### CDの基本フロー
- 失敗通知を大量に送信することがないよう、基本構造は次のフローを意識すること
- 1. ガード節
- 2. CI
- 3. デリバリ

### ガード節の徹底
- linterや型チェック、及びに外部依存パッケージの脆弱性や不正コード混入は、ワークフローの初めに定義すること

### テストピラミッドを意識したテストの配置
- developブランチのテスト項目は、ユニットテスト、結合テスト、E2Eテスト、カバレッジ取得、循環的複雑度の検査に限定すること
- ベンチマークテスト等の実行時間が長期化するテストは、mainブランチへのプルリクエストクローズ時に限定すること

### ジョブのタイムアウト設定による、計算資源節約
- 途中でハングしたジョブを放置されないように、ジョブのタイムアウトは明示的に設定すること

### エラーハンドリングによる早期中断
- 各ステップでエラーハンドリングを行い、失敗した場合に適切なアクションを取るようにしてください。

### キャッシュ利用による、ワークフロー高速化
- ビルドや依存関係のキャッシュを積極的に利用すること
- キャッシュ以外にも、ワークフローの実行時間を短縮することを検討すること

### セットアップ処理の責任分離とヘルパー化
- 全てのセットアップ処理は、Composite actionsを使って実装すること

### ビルド処理の責任分離とヘルパー化
- 全てのビルド処理は、Composite actionsを使って実装すること

---

## セキュリティ対策

### ブランチ保護
- mainブランチに直接pushできないようにすること
- mainブランチには、本番環境にいつでもリリースできるコードのみ維持すること
- mainブランチの変更は、プルリクエスト経由のマージのみ許可すること

### 予期せぬコード変更の抑止
- ファイル書き換えが発生しない限り、contents:readのpermissionを徹底すること

### コマンドインジェクション脆弱性の回避策
- コマンドインジェクションの脆弱性の可能性があります
- runコマンド内の ${{ github.event.* }} 値に適切なエスケープを使用すること
- 全てのshell内の変数は、"${VARIABLE}"のようにダブルクォーテーションでエスケープすること

### サードパーティアクションの使用チェック
- 使用中のサードパーティアクションが多い場合、セキュリティ上の懸念を確認してください。
- 使用中のサードパーティアクションが信頼できるものであることを確認してください。
