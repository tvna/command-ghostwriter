---
description: Code style rules for python
globs: *.py
alwaysApply: false
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Python Style Checker

## 概要
Pythonファイルのスタイル規約をチェックするルールです

## 対象ファイル
- **/*.py

## ルール

### スタイル規約の基本ルール
- `pyroject.toml`における、`[tool.ruff]`の設定に従ってフォーマットを実施すること
- 構文チェックのルールを追加する場合、`pyroject.toml`に追加すること
- RUF003のエラーが発生しないように、コメントの記述には徹底的に配慮すること

### 不要なコードの削除
- 使用されていない変数や関数、コメントアウトされたコードは削除するべきです。これにより、コードがクリーンで理解しやすくなります。

### 型ヒントの使用とチェック
- すべての関数には、引数と戻り値に対して型ヒントを使用するべきです。これにより、コードの可読性と保守性が向上します。
- テスト関数に型ヒント（`->`）が含まれていない場合、警告を出します。

### ドキュメンテーション
- Google Python Style Guideによる記述を徹底すること https://google.github.io/styleguide/pyguide.html
- モジュールレベルのdocstringでは、そのモジュールの目的と使用方法を説明すること
- 日本語でコメント生成するにあたり、コメント内で全角括弧`（）`は利用せず、ブラケット`[]`の利用を徹底すること

### コメントの目的
- コードが「何をしているか」ではなく「なぜそうしているか」を説明すること
- 複雑なロジックや非直感的な解決策には必ずコメントを付けること
- TODOコメントには、何が必要か、なぜ必要かを明記すること

### 変数と関数の明確な命名
- 変数や関数の名前は、その目的や役割を明確に表すこと
- 略語は一般的に知られているもの以外は避けること
- ブール値を返す関数や変数は、is_, has_, can_などの接頭辞を使用すること

### 命名の一貫性
- クラス名はPascalCase（MyClass）
- 関数名と変数名はsnake_case（my_function）
- 定数はALL_CAPS（MAX_SIZE）
- プライベートメンバーには先頭にアンダースコア（_private_method）

### コードの構造の関数設計
- 関数は一つのことだけを行うこと（単一責任の原則）
- 関数の長さは画面に収まる程度（20-30行以内）に抑えること
- 引数の数は少なく保つこと（理想は2-3個まで）

### コード構造の制御フロー
- ネストは浅く保つこと（理想は2-3レベルまで）
- 早期リターンを活用して、ネストを減らすこと
- 複雑な条件式は、説明的な変数名を持つ中間変数に分解すること

### コード構造のエラー処理
- 例外は具体的なものを使い、適切な粒度で捕捉すること
- エラーメッセージは具体的で、問題解決に役立つ情報を含めること
- 「沈黙の失敗」を避け、エラーは明示的に処理すること
