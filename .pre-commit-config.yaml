# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
minimum_pre_commit_version: "3.7.1"  # pyproject.tomlと一致させる
repos:

- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v5.0.0
  hooks:
  - id: no-commit-to-branch
    args: [--branch, main]
    description: "Run 'no-commit-to-branch' for preventing commits to main branch"
    name: don't commit to main branch
  - id: trailing-whitespace
  - id: check-added-large-files
    description: "Run 'check-added-large-files' for checking added large files"
  - id: detect-private-key
  - id: check-json
  - id: check-toml
    files: \.toml$
  - id: check-docstring-first
  - id: check-shebang-scripts-are-executable
    description: "checking shebang scripts are executable"
    name: check-shebang-scripts-are-executable (only for github actions)
    files: /\.github\/scripts\/.*\.py$/
  - id: check-symlinks
  - id: check-illegal-windows-names
  - id: pretty-format-json
    args:
      - "--autofix"
      - "--indent=4"
    description: "Run 'pretty-format-json' for JSON formatting"
    files: \.json$|\.code-workspace$
    exclude: ^package\.json$|^package-lock\.json$
  - id: destroyed-symlinks
    description: "Run 'destroyed-symlinks' for checking destroyed symlinks"

- repo: https://github.com/tox-dev/pyproject-fmt
  rev: v2.5.1
  hooks:
    - id: pyproject-fmt
      description: "Run 'pyproject-fmt' for extremely fast Python formatting"
      name: fomart pyproject
      # https://pyproject-fmt.readthedocs.io/en/latest/#calculating-max-supported-python-version
      additional_dependencies: ["tox>=4.9"]

- repo: https://github.com/astral-sh/ruff-pre-commit
  rev: v0.9.10
  hooks:
    - id: ruff
      description: "Run 'ruff' for extremely fast Python linting"
      name: ruff (lint)
      args: ["--fix"]
    - id: ruff-format
      description: "Run 'ruff format' for extremely fast Python formatting"
      name: ruff (format)

# - repo: https://github.com/alessandrojcm/commitlint-pre-commit-hook
#   rev: v9.22.0
#   hooks:
#     - id: commitlint
#       description: "Run 'commitlint' for commit message validation"
#       stages: [commit-msg]
#       additional_dependencies: ['@commitlint/config-conventional']

# The following configuration uses check-jsonschema to validate Github Workflow files.
- repo: https://github.com/python-jsonschema/check-jsonschema
  rev: 0.31.3
  hooks:
    - id: check-github-workflows
      description: "Run 'check-github-workflows' for Github Workflow validation"
- repo: https://github.com/pre-commit/mirrors-mypy
  rev: v1.15.0
  hooks:
    - id: mypy
      description: "Run 'mypy' for Python linting"
      additional_dependencies: ["types-PyYAML"]

- repo: https://github.com/pre-commit/pygrep-hooks
  rev: v1.10.0
  hooks:
    - id: python-use-type-annotations
      description: "Run 'python-use-type-annotations' for Python linting"

- repo: local
  hooks:
    - id: pytest_unit
      name: pytest (marker.unit)
      entry: pytest -m unit --disable-warnings
      language: system
      pass_filenames: false
    - id: pytest_integration
      name: pytest (marker.integration)
      entry: pytest -m integration --disable-warnings
      language: system
      pass_filenames: false
    - id: pytest_workflow
      name: pytest (marker.workflow)
      entry: pytest -m workflow --disable-warnings
      language: system
      pass_filenames: false
    - id: lizard
      name: lizard (CCN)
      entry: poetry run lizard -x "./node_modules/*" -x "./.venv/*" -x "./build/*" -x "./dist/*" -x "./htmlcov/*" --CCN "13"
      language: system
      pass_filenames: false
